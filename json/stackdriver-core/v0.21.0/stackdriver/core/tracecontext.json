{"id":"stackdriver/core/tracecontext","name":"TraceContext","title":["Stackdriver","Core","TraceContext"],"description":"<p>A Stackdriver trace context links the current request into a performance\ntrace, and communicates tracing options between related requests. This\nfunctionality is used by the Stackdriver diagnostics libraries\n(including google-cloud-trace, google-cloud-logging, and other rubygems)\nthat integrate with the tracing service.</p>\n\n<p>Most applications will not need to use the TraceContext class directly.\nThe Stackdriver libraries use it internally to store and propagate\ncontext information.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L29","resources":[],"examples":[],"methods":[{"id":"initialize-constructor","type":"constructor","name":"initialize","title":["Stackdriver","Core","TraceContext#initialize"],"description":"<p>Create a new TraceContext instance.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L70","resources":[],"examples":[{"caption":"","code":"require \"stackdriver/core\"\n\ntrace_id = \"0123456789abcdef0123456789abcdef\"\nctx = Stackdriver::Core::TraceContext.new trace_id: trace_id,\n                                          sampled: true"}],"params":[{"name":"trace_id","types":["String"],"description":"The trace ID as a hex string. If nil or\nomitted, a new random Trace ID will be generated, and this\nTraceContext will be marked as new.","optional":true,"default":"nil","nullable":true},{"name":"is_new","types":["Boolean"],"description":"Whether this trace context should be flagged\nas newly created. Optional: if unset, will reflect whether a new\ntrace_id was generated when this object was created.","optional":true,"default":"nil","nullable":true},{"name":"span_id","types":["Integer"],"description":"The context parent span ID as a 64-bit int.\nIf nil or omitted, the context will specify no parent span.","optional":true,"default":"nil","nullable":true},{"name":"sampled","types":["Boolean"],"description":"Whether the context has decided to sample\nthis trace or not, or nil if the context does not specify a\nsampling decision.","optional":true,"default":"nil","nullable":true},{"name":"capture_stack","types":["Boolean"],"description":"Whether the the context has decided to\ncapture stack traces. Ignored if sampled is not true.","optional":true,"default":"false","nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"stackdriver/core/tracecontext\">TraceContext</a>"],"description":"a new instance of TraceContext"}]},{"id":"trace_id-instance","type":"instance","name":"trace_id","title":["Stackdriver","Core","TraceContext#trace_id"],"description":"<p>The trace ID, as a hex string.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L93","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"span_id-instance","type":"instance","name":"span_id","title":["Stackdriver","Core","TraceContext#span_id"],"description":"<p>The span ID, as a 64-bit integer, or <code>nil</code> if no span ID is present\nin the context.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L101","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer","nil"],"description":""}]},{"id":"sampled?-instance","type":"instance","name":"sampled?","title":["Stackdriver","Core","TraceContext#sampled?"],"description":"<p>Returns <code>true</code> if the context wants to sample, <code>false</code> if the context\nwants explicitly to disable sampling, or <code>nil</code> if the context does\nnot specify.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L110","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Boolean","nil"],"description":""}]},{"id":"capture_stack?-instance","type":"instance","name":"capture_stack?","title":["Stackdriver","Core","TraceContext#capture_stack?"],"description":"<p>Returns <code>true</code> if the context wants to capture stack traces, <code>false</code> if\nthe context does not, or <code>nil</code> if the context does not specify a\nsampling decision.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L121","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Boolean","nil"],"description":""}]},{"id":"new?-instance","type":"instance","name":"new?","title":["Stackdriver","Core","TraceContext#new?"],"description":"<p>Returns <code>true</code> if this trace includes a newly generated trace_id.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L130","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":""}]},{"id":"eql?-instance","type":"instance","name":"eql?","title":["Stackdriver","Core","TraceContext#eql?"],"description":"<p>Standard value equality check for this object.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L140","resources":[],"examples":[],"params":[{"name":"other","types":["Object"],"description":"An object to compare with.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Boolean"],"description":""}]},{"id":"hash-instance","type":"instance","name":"hash","title":["Stackdriver","Core","TraceContext#hash"],"description":"<p>Generate standard hash code for this object.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L155","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":""}]},{"id":"with-instance","type":"instance","name":"with","title":["Stackdriver","Core","TraceContext#with"],"description":"<p>Returns a new TraceContext instance that is identical to this instance\nexcept for the given changes. All parameters are optional. See\n<a data-custom-type=\"stackdriver/core/tracecontext\" data-method=\"initialize-constructor\">TraceContext#initialize</a> for more details on each parameter.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L180","resources":[],"examples":[{"caption":"","code":"require \"stackdriver/core\"\n\ntrace_id = \"0123456789abcdef0123456789abcdef\"\norig_ctx = Stackdriver::Core::TraceContext.new trace_id: trace_id,\n\nsampled_ctx = orig_ctx.with sampled: true"}],"params":[{"name":"trace_id","types":["String"],"description":"New trace ID.","optional":true,"default":"UNCHANGED","nullable":false},{"name":"is_new","types":["Boolean"],"description":"New setting for newness indicator.","optional":true,"default":"UNCHANGED","nullable":false},{"name":"span_id","types":["Integer"],"description":"New parent span ID.","optional":true,"default":"UNCHANGED","nullable":false},{"name":"sampled","types":["Boolean"],"description":"New sampling decision.","optional":true,"default":"UNCHANGED","nullable":false},{"name":"capture_stack","types":["Boolean"],"description":"New stack capture decision.","optional":true,"default":"UNCHANGED","nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"stackdriver/core/tracecontext\">TraceContext</a>"],"description":""}]},{"id":"to_string-instance","type":"instance","name":"to_string","title":["Stackdriver","Core","TraceContext#to_string"],"description":"<p>Returns a string representation of this trace context, in the form\n<code>&lt;traceid&gt;[/&lt;spanid&gt;][;o=&lt;options&gt;]</code>. This form is suitable for\nsetting the trace context header.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L198","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"parse_string-class","type":"class","name":"parse_string","title":["Stackdriver","Core","TraceContext.parse_string"],"description":"<p>Attempts to parse the given string as a trace context representation.\nExpects the form <code>&lt;traceid&gt;[/&lt;spanid&gt;][;o=&lt;options&gt;]</code>, which is the\nform used in the trace context header. Returns either the parsed\ntrace context, or <code>nil</code> if the string was malformed.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L227","resources":[],"examples":[{"caption":"","code":"require \"stackdriver/core\"\n\nstr = \"0123456789abcdef0123456789abcdef/12345;o=1\"\nctx = Stackdriver::Core::TraceContext.parse_string str"}],"params":[{"name":"str","types":["String"],"description":"The string to parse.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"stackdriver/core/tracecontext\">TraceContext</a>","nil"],"description":""}]},{"id":"parse_rack_env-class","type":"class","name":"parse_rack_env","title":["Stackdriver","Core","TraceContext.parse_rack_env"],"description":"<p>Obtains a TraceContext from the given Rack environment. This should\nbe used by any service that wants to obtain the TraceContext for a\nRack request. If a new trace context is generated in the process, it\nis memoized into the Rack environment so subsequent services will get\nthe same context.</p>\n\n<p>Specifically, the following steps are attempted in order:</p>\n<ol>\n  <li>Attempts to use any memoized context previously obtained.</li>\n  <li>Attempts to parse the trace context header.</li>\n  <li>Creates a new trace context with a random trace ID.</li>\n</ol>\n\n<p>Furthermore, if a block is given, it is provided with an opportunity\nto modify the trace context. The current trace context and the Rack\nenvironment is passed to the block, and its result is used as the\nfinal trace context. The final context is memoized back into the\nRack environment.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L283","resources":[],"examples":[{"caption":"","code":"require \"stackdriver/core\"\n\nclass MyMiddleware\n  def initialize app\n    @app = app\n  end\n\n  def call env\n    ctx = Stackdriver::Core::TraceContext.parse_rack_env env\n    do_something_with ctx\n    @app.call env\n  end\nend"}],"params":[{"name":"env","types":["Hash"],"description":"The Rack environment hash","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"stackdriver/core/tracecontext\">TraceContext</a>"],"description":""}]},{"id":"set-class","type":"class","name":"set","title":["Stackdriver","Core","TraceContext.set"],"description":"<p>Set the current thread’s trace context, and returns the context.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L306","resources":[],"examples":[{"caption":"","code":"require \"stackdriver/core\"\n\nctx = Stackdriver::Core::TraceContext.new\nStackdriver::Core::TraceContext.set ctx\nsame_ctx = Stackdriver::Core::TraceContext.get"}],"params":[{"name":"trace_context","types":["TraceContext","nil"],"description":"The trace context to\nset for the current thread. May be <code>nil</code>.","optional":false,"nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"stackdriver/core/tracecontext\">TraceContext</a>","nil"],"description":"The context set."}]},{"id":"get-class","type":"class","name":"get","title":["Stackdriver","Core","TraceContext.get"],"description":"<p>Returns the current thread’s trace context, or <code>nil</code> if no trace\ncontext has been set.</p>","source":"stackdriver-core/lib/stackdriver/core/trace_context.rb#L324","resources":[],"examples":[{"caption":"","code":"require \"stackdriver/core\"\n\nctx = Stackdriver::Core::TraceContext.new\nStackdriver::Core::TraceContext.set ctx\nsame_ctx = Stackdriver::Core::TraceContext.get"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"stackdriver/core/tracecontext\">TraceContext</a>","nil"],"description":""}]}]}