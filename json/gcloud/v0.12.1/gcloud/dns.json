{"id":"gcloud/dns","name":"Dns","title":["Gcloud","Dns"],"description":"<h1 id=\"google-cloud-dns\">Google Cloud DNS</h1>\n\n<p>Google Cloud DNS is a high-performance, resilient, global DNS service that\nprovides a cost-effective way to make your applications and services\navailable to your users. This programmable, authoritative DNS service can be\nused to easily publish and manage DNS records using the same infrastructure\nrelied upon by Google. To learn more, read <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">What is Google Cloud\nDNS?</a>.</p>\n\n<p>The goal of gcloud-ruby is to provide an API that is comfortable\nto Rubyists. Authentication is handled by <a data-custom-type=\"gcloud\" data-method=\"dns-instance\">Gcloud#dns</a>. You can provide the\nproject and credential information to connect to the Cloud DNS service, or\nif you are running on Google Compute Engine this configuration is taken care\nof for you. You can read more about the options for connecting in the\n<a href=\"https://googlecloudplatform.github.io/gcloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"creating-zones\">Creating Zones</h2>\n\n<p>To get started with Google Cloud DNS, use your DNS Project to create a new\nZone. The second argument to <a data-custom-type=\"gcloud/dns/project\" data-method=\"create_zone-instance\">Gcloud::Dns::Project#create_zone</a> must be a\nunique domain name for which you can <a href=\"https://www.google.com/webmasters/verification/home\">verify\nownership</a>. Substitute\na domain name of your own (ending with a dot to signify that it is <a href=\"https://en.wikipedia.org/wiki/Fully_qualified_domain_name\">fully\nqualified</a>) as\nyou follow along with these examples.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.create_zone \"example-com\", \"example.com.\"\nputs zone.id # unique identifier defined by the server\n</code></pre>\n\n<p>For more information, see <a href=\"https://cloud.google.com/dns/zones/\">Managing\nZones</a>.</p>\n\n<h2 id=\"listing-zones\">Listing Zones</h2>\n\n<p>You can retrieve all the zones in your project.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzones = dns.zones\nzones.each do |zone|\n  puts \"#{zone.name} - #{zone.dns}\"\nend\n</code></pre>\n\n<p>You can also retrieve a single zone by either name or id.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\n</code></pre>\n\n<h2 id=\"listing-records\">Listing Records</h2>\n\n<p>When you create a zone, the Cloud DNS service automatically creates two\nRecord instances for it, providing configuration for Cloud DNS nameservers.\nLet’s take a look at these records.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nrecords = zone.records\nrecords.count #=&gt; 2\nrecords.map &amp;:type #=&gt; [\"NS\", \"SOA\"]\nzone.records.first.data.count #=&gt; 4\nzone.records.first.data #=&gt; [\"ns-cloud-d1.googledomains.com.\", ...]\n</code></pre>\n\n<p>Note that <a data-custom-type=\"gcloud/dns/record\" data-method=\"data-instance\">Gcloud::Dns::Record#data</a> returns an array. The Cloud DNS service\nonly allows the zone to have one Record instance for each name and type\ncombination. It supports multiple “resource records” (in this case, the four\nnameserver addresses) via this <code>data</code> collection.</p>\n\n<h2 id=\"managing-records\">Managing Records</h2>\n\n<p>You can easily add your own records to the zone. Each call to\n<a data-custom-type=\"gcloud/dns/zone\" data-method=\"add-instance\">Gcloud::Dns::Zone#add</a> results in a new Cloud DNS Change instance.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.add \"www\", \"A\", 86400, [\"1.2.3.4\"]\nchange.additions.map &amp;:type #=&gt; [\"A\", \"SOA\"]\nchange.deletions.map &amp;:type #=&gt; [\"SOA\"]\n</code></pre>\n\n<p>Whenever you change the set of records belonging to a zone, the zone’s start\nof authority (SOA) record should be updated with a higher serial number. The\ngcloud-ruby library automates this update for you, deleting the old SOA\nrecord and adding an updated one, as shown in the example above. You can\ndisable or modify this behavior, of course. See <a data-custom-type=\"gcloud/dns/zone\" data-method=\"update-instance\">Gcloud::Dns::Zone#update</a>\nfor details.</p>\n\n<p>You can retrieve records by name and type. The name argument can be a\nsubdomain (e.g., <code>www</code>) fragment for convenience, but notice that the\nretrieved record’s domain name is always fully-qualified.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nrecords = zone.records \"www\", \"A\"\nrecords.first.name #=&gt; \"www.example.com.\"\n</code></pre>\n\n<p>You can use <a data-custom-type=\"gcloud/dns/zone\" data-method=\"replace-instance\">Gcloud::Dns::Zone#replace</a> to update the <code>ttl</code> and <code>data</code> for a\nrecord.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.replace \"www\", \"A\", 86400, [\"5.6.7.8\"]\n</code></pre>\n\n<p>Or, you can use <a data-custom-type=\"gcloud/dns/zone\" data-method=\"modify-instance\">Gcloud::Dns::Zone#modify</a> to update just the <code>ttl</code> or\n<code>data</code>, without the risk of inadvertently changing values that you wish to\nleave unchanged.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.modify \"www\", \"A\" do |r|\n  r.ttl = 3600 # change only the TTL\nend\n</code></pre>\n\n<p>You can also delete records by name and type.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.remove \"www\", \"A\"\nrecord = change.deletions.first\n</code></pre>\n\n<p>The best way to add, remove, and update multiple records in a single\n<a href=\"https://cloud.google.com/dns/records\">transaction</a> is to call\n<a data-custom-type=\"gcloud/dns/zone\" data-method=\"update-instance\">Gcloud::Dns::Zone#update</a> with a block. See\n<a data-custom-type=\"gcloud/dns/zone/transaction\">Gcloud::Dns::Zone::Transaction</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.update do |tx|\n  tx.add     \"www\", \"A\",  86400, \"1.2.3.4\"\n  tx.remove  \"example.com.\", \"TXT\"\n  tx.replace \"example.com.\", \"MX\", 86400, [\"10 mail1.example.com.\",\n                                           \"20 mail2.example.com.\"]\n  tx.modify \"www.example.com.\", \"CNAME\" do |r|\n    r.ttl = 86400 # only change the TTL\n  end\nend\n</code></pre>\n\n<p>Finally, you can add and delete records by reference, using\n<a data-custom-type=\"gcloud/dns/zone\" data-method=\"update-instance\">Gcloud::Dns::Zone#update</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nto_add = zone.record \"www\", \"AAAA\", 86400, [\"2607:f8b0:400a:801::1005\"]\nto_delete = zone.records \"www\", \"A\"\nchange = zone.update to_add, to_delete\n</code></pre>\n\n<h2 id=\"listing-changes\">Listing Changes</h2>\n\n<p>Because the transactions you execute against your zone do not always\ncomplete immediately, you can retrieve and inspect changes.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchanges = zone.changes\nchanges.each do |change|\n  puts \"#{change.id} - #{change.started_at} - #{change.status}\"\nend\n</code></pre>\n\n<h2 id=\"importing-and-exporting-zone-files\">Importing and exporting zone files</h2>\n\n<p>You can import from a zone file. Because the Cloud DNS service only allows\nthe zone to have one Record instance for each name and type combination,\nlines may be merged as needed into records with multiple <code>data</code> values.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.import \"path/to/db.example.com\"\n</code></pre>\n\n<p>You can also export to a zone file.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\n\nzone.export \"path/to/db.example.com\"\n</code></pre>\n\n<h2 id=\"configuring-retries-and-timeout\">Configuring retries and timeout</h2>\n\n<p>You can configure how many times API requests may be automatically retried.\nWhen an API request fails, the response will be inspected to see if the\nrequest meets criteria indicating that it may succeed on retry, such as\n<code>500</code> and <code>503</code> status codes or a specific internal error code such as\n<code>rateLimitExceeded</code>. If it meets the criteria, the request will be retried\nafter a delay. If another error occurs, the delay will be increased before a\nsubsequent attempt, until the <code>retries</code> limit is reached.</p>\n\n<p>You can also set the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns retries: 10, timeout: 120\n</code></pre>","source":"lib/gcloud/dns.rb#L334","resources":[],"examples":[],"methods":[]}