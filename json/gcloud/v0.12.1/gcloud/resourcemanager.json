{"id":"gcloud/resourcemanager","name":"ResourceManager","title":["Gcloud","ResourceManager"],"description":"<h1 id=\"google-cloud-resource-manager\">Google Cloud Resource Manager</h1>\n\n<p>The Resource Manager API provides methods that you can use to\nprogrammatically manage your projects in the Google Cloud Platform. You may\nbe familiar with managing projects in the <a href=\"https://developers.google.com/console/help/new/\">Developers\nConsole</a>. With this API you\ncan do the following:</p>\n\n<ul>\n  <li>Get a list of all projects associated with an account</li>\n  <li>Create new projects</li>\n  <li>Update existing projects</li>\n  <li>Delete projects</li>\n  <li>Undelete, or recover, projects that you don’t want to delete</li>\n</ul>\n\n<p>The Resource Manager API is a Beta release and is not covered by any SLA or\ndeprecation policy and may be subject to backward-incompatible changes.</p>\n\n<h2 id=\"accessing-the-service\">Accessing the Service</h2>\n\n<p>Currently, the full functionality of the Resource Manager API is available\nonly to whitelisted users. (Contact your account manager or a member of the\nGoogle Cloud sales team if you are interested in access.) Read-only methods\nsuch as <a data-custom-type=\"gcloud/resourcemanager/manager\" data-method=\"projects-instance\">ResourceManager::Manager#projects</a> and\n<a data-custom-type=\"gcloud/resourcemanager/manager\" data-method=\"project-instance\">ResourceManager::Manager#project</a> are accessible to any user who enables\nthe Resource Manager API in the <a href=\"https://console.developers.google.com\">Developers\nConsole</a>.</p>\n\n<h2 id=\"authentication\">Authentication</h2>\n\n<p>The Resource Manager API currently requires authentication of a <a href=\"https://developers.google.com/identity/protocols/OAuth2\">User\nAccount</a>, and\ncannot currently be accessed with a <a href=\"https://developers.google.com/identity/protocols/OAuth2ServiceAccount\">Service\nAccount</a>.\nTo use a User Account install the <a href=\"http://cloud.google.com/sdk\">Google Cloud\nSDK</a> and authenticate with the following:</p>\n\n<pre><code>$ gcloud auth login\n</code></pre>\n\n<p>Also make sure all <code>GCLOUD</code> environment variables are cleared of any service\naccounts. Then gcloud-ruby will be able to detect the user authentication\nand connect with those credentials.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\n</code></pre>\n\n<h2 id=\"listing-projects\">Listing Projects</h2>\n\n<p>Project is a collection of settings, credentials, and metadata about the\napplication or applications you’re working on. You can retrieve and inspect\nall projects that you have permissions to. (See\n<a data-custom-type=\"gcloud/resourcemanager/manager\" data-method=\"projects-instance\">Gcloud::ResourceManager::Manager#projects</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nresource_manager.projects.each do |project|\n  puts projects.project_id\nend\n</code></pre>\n\n<h2 id=\"managing-projects-with-labels\">Managing Projects with Labels</h2>\n\n<p>Labels can be added to or removed from projects. (See\n<a data-custom-type=\"gcloud/resourcemanager/project\" data-method=\"labels-instance\">Gcloud::ResourceManager::Project#labels</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\n# Label the project as production\nproject.update do |p|\n  p.labels[\"env\"] = \"production\"\nend\n</code></pre>\n\n<p>Projects can then be filtered by labels. (See\n<a data-custom-type=\"gcloud/resourcemanager/manager\" data-method=\"projects-instance\">Gcloud::ResourceManager::Manager#projects</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\n# Find only the productions projects\nprojects = resource_manager.projects filter: \"labels.env:production\"\nprojects.each do |project|\n  puts project.project_id\nend\n</code></pre>\n\n<h2 id=\"creating-a-project\">Creating a Project</h2>\n\n<p>You can also use the API to create new projects. (See\n<a data-custom-type=\"gcloud/resourcemanager/manager\" data-method=\"create_project-instance\">Gcloud::ResourceManager::Manager#create_project</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.create_project \"tokyo-rain-123\",\n                                          name: \"Todos Development\",\n                                          labels: {env: :development}\n</code></pre>\n\n<h2 id=\"deleting-a-project\">Deleting a Project</h2>\n\n<p>You can delete projects when they are no longer needed. (See\n<a data-custom-type=\"gcloud/resourcemanager/manager\" data-method=\"delete-instance\">Gcloud::ResourceManager::Manager#delete</a> and\n<a data-custom-type=\"gcloud/resourcemanager/project\" data-method=\"delete-instance\">Gcloud::ResourceManager::Project#delete</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nresource_manager.delete \"tokyo-rain-123\"\n</code></pre>\n\n<h2 id=\"undeleting-a-project\">Undeleting a Project</h2>\n\n<p>You can also restore a deleted project within the waiting period that starts\nwhen the project was deleted. Restoring a project returns it to the state it\nwas in prior to being deleted. (See\n<a data-custom-type=\"gcloud/resourcemanager/manager\" data-method=\"undelete-instance\">Gcloud::ResourceManager::Manager#undelete</a> and\n<a data-custom-type=\"gcloud/resourcemanager/project\" data-method=\"undelete-instance\">Gcloud::ResourceManager::Project#undelete</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nresource_manager.undelete \"tokyo-rain-123\"\n</code></pre>\n\n<h2 id=\"configuring-retries-and-timeout\">Configuring retries and timeout</h2>\n\n<p>You can configure how many times API requests may be automatically retried.\nWhen an API request fails, the response will be inspected to see if the\nrequest meets criteria indicating that it may succeed on retry, such as\n<code>500</code> and <code>503</code> status codes or a specific internal error code such as\n<code>rateLimitExceeded</code>. If it meets the criteria, the request will be retried\nafter a delay. If another error occurs, the delay will be increased before a\nsubsequent attempt, until the <code>retries</code> limit is reached.</p>\n\n<p>You can also set the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager retries: 10, timeout: 120\n</code></pre>\n\n<p>See the <a href=\"https://cloud.google.com/resource-manager/docs/core_errors\">Resource Manager error\nmessages</a>\nfor a list of error conditions.</p>\n\n<h2 id=\"managing-iam-policies\">Managing IAM Policies</h2>\n\n<p>Google Cloud Identity and Access Management (<a href=\"https://cloud.google.com/iam/\">Cloud\nIAM</a>) access control policies can be managed\non projects. These policies allow project owners to manage <em>who</em> (identity)\nhas access to <em>what</em> (role). See <a href=\"https://cloud.google.com/iam/docs/overview\">Cloud IAM\nOverview</a> for more information.</p>\n\n<p>A project’s access control policy can be retrieved. (See\n<a data-custom-type=\"gcloud/resourcemanager/project\" data-method=\"policy-instance\">Gcloud::ResourceManager::Project#policy</a> and\n<a data-custom-type=\"gcloud/resourcemanager/policy\">Gcloud::ResourceManager::Policy</a>.)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\npolicy = project.policy\n</code></pre>\n\n<p>A project’s access control policy can also be updated:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\n\npolicy = project.policy do |p|\n  p.add \"roles/viewer\", \"serviceAccount:your-service-account\"\nend\n</code></pre>\n\n<p>And permissions can be tested on a project. (See\n<a data-custom-type=\"gcloud/resourcemanager/project\" data-method=\"test_permissions-instance\">Gcloud::ResourceManager::Project#test_permissions</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nperms = project.test_permissions \"resourcemanager.projects.get\",\n                                 \"resourcemanager.projects.delete\"\nperms.include? \"resourcemanager.projects.get\"    #=&gt; true\nperms.include? \"resourcemanager.projects.delete\" #=&gt; false\n</code></pre>\n\n<p>For more information about using access control policies see <a href=\"https://cloud.google.com/iam/docs/managing-policies\">Managing\nPolicies</a>.</p>","source":"lib/gcloud/resource_manager.rb#L286","resources":[],"examples":[],"methods":[]}