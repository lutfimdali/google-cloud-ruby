{"id":"gcloud/logging/resourcedescriptor/list","name":"List","title":["Gcloud","Logging","ResourceDescriptor","List"],"description":"<p>ResourceDescriptor::List is a special case Array with additional values.</p>","source":"lib/gcloud/logging/resource_descriptor/list.rb#L23","resources":[],"examples":[],"methods":[{"id":"token-instance","type":"instance","name":"token","title":["Gcloud","Logging","ResourceDescriptor","List#token"],"description":"<p>If not empty, indicates that there are more records that match\nthe request and this value should be passed to continue.</p>","source":"lib/gcloud/logging/resource_descriptor/list.rb#L27","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"token=-instance","type":"instance","name":"token=","title":["Gcloud","Logging","ResourceDescriptor","List#token="],"description":"<p>If not empty, indicates that there are more records that match\nthe request and this value should be passed to continue.</p>","source":"lib/gcloud/logging/resource_descriptor/list.rb#L27","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"next?-instance","type":"instance","name":"next?","title":["Gcloud","Logging","ResourceDescriptor","List#next?"],"description":"<p>Whether there is a next page of resource descriptors.</p>","source":"lib/gcloud/logging/resource_descriptor/list.rb#L52","resources":[],"examples":[{"caption":"","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\n\nresource_descriptors = logging.resource_descriptors\nif resource_descriptors.next?\n  next_resource_descriptors = resource_descriptors.next\nend"}],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":""}]},{"id":"next-instance","type":"instance","name":"next","title":["Gcloud","Logging","ResourceDescriptor","List#next"],"description":"<p>Retrieve the next page of resource descriptors.</p>","source":"lib/gcloud/logging/resource_descriptor/list.rb#L72","resources":[],"examples":[{"caption":"","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\n\nresource_descriptors = logging.resource_descriptors\nif resource_descriptors.next?\n  next_resource_descriptors = resource_descriptors.next\nend"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/logging/sink/list\">Sink::List</a>"],"description":""}]},{"id":"all-instance","type":"instance","name":"all","title":["Gcloud","Logging","ResourceDescriptor","List#all"],"description":"<p>Retrieves all resource descriptors by repeatedly loading <a data-custom-type=\"gcloud/logging/resourcedescriptor/list\" data-method=\"next-instance\">#next</a> until\n<a data-custom-type=\"gcloud/logging/resourcedescriptor/list\" data-method=\"next?-instance\">#next?</a> returns <code>false</code>. Calls the given block once for each resource\ndescriptor, which is passed as the parameter.</p>\n\n<p>An Enumerator is returned if no block is given.</p>\n\n<p>This method may make several API calls until all resource descriptors\nare retrieved. Be sure to use as narrow a search criteria as possible.\nPlease use with caution.</p>","source":"lib/gcloud/logging/resource_descriptor/list.rb#L132","resources":[],"examples":[{"caption":"<p>Iterating each resource descriptor by passing a block:</p>","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nresource_descriptors = logging.resource_descriptors\n\nresource_descriptors.all do |rd|\n  puts rd.type\nend"},{"caption":"<p>Using the enumerator by not passing a block:</p>","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nresource_descriptors = logging.resource_descriptors\n\nall_types = resource_descriptors.all.map do |rd|\n  rd.type\nend"},{"caption":"<p>Limit the number of API calls made:</p>","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nresource_descriptors = logging.resource_descriptors\n\nresource_descriptors.all(request_limit: 10) do |rd|\n  puts rd.type\nend"}],"params":[{"name":"request_limit","types":["Integer"],"description":"The upper limit of API requests to make\nto load all resource descriptors. Default is no limit.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"The block for accessing each resource\ndescriptor.","optional":true,"nullable":false},{"name":"yield.resource_descriptor","types":["ResourceDescriptor"],"description":"The resource\ndescriptor object.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Enumerator"],"description":""}]}]}