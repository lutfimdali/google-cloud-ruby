{"id":"gcloud/datastore","name":"Datastore","title":["Gcloud","Datastore"],"description":"<h1 id=\"google-cloud-datastore\">Google Cloud Datastore</h1>\n\n<p>Google Cloud Datastore is a fully managed, schemaless database for storing\nnon-relational data. You should feel at home if you are familiar with\nrelational databases, but there are some key differences to be aware of to\nmake the most of using Datastore.</p>\n\n<p>Gcloud’s goal is to provide a API that is familiar and comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"gcloud\" data-method=\"datastore-instance\">Gcloud#datastore</a>. You can provide\nthe project and credential information to connect to the Datastore service,\nor if you are running on Google Compute Engine this configuration is taken\ncare of for you.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\ndatastore = gcloud.datastore\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask[\"priority\"] = 5\ndatastore.save task\n</code></pre>\n\n<p>You can learn more about various options for connection on the\n<a href=\"https://googlecloudplatform.github.io/gcloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<p>To learn more about Datastore, read the\n<a href=\"https://cloud.google.com/datastore/docs/concepts/overview\">Google Cloud Datastore Concepts Overview\n</a>.</p>\n\n<h2 id=\"retrieving-records\">Retrieving records</h2>\n\n<p>Records, called “entities” in Datastore, are retrieved by using a key.\nThe key is more than a numeric identifier, it is a complex data structure\nthat can be used to model relationships. The simplest key has a string\n<tt>kind</tt> value, and either a numeric <tt>id</tt> value, or a string\n<tt>name</tt> value. A single record can be retrieved by calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"find-instance\">Gcloud::Datastore::Dataset#find</a> and passing the parts of the key:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask = datastore.find \"Task\", \"sampleTask\"\n</code></pre>\n\n<p>Optionally, <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"find-instance\">Gcloud::Datastore::Dataset#find</a> can be given a key object:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask_key = datastore.key \"Task\", 123456\ntask = datastore.find task_key\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"find-instance\">Gcloud::Datastore::Dataset#find</a></p>\n\n<h2 id=\"querying-records\">Querying records</h2>\n\n<p>Multiple records can be found that match criteria.\n(See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"where-instance\">Gcloud::Datastore::Query#where</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\nquery = datastore.query(\"Task\").\n  where(\"done\", \"=\", false)\n\ntasks = datastore.run query\n</code></pre>\n\n<p>Records can also be ordered. (See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"order-instance\">Gcloud::Datastore::Query#order</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\nquery = datastore.query(\"Task\").\n  order(\"created\")\n\ntasks = datastore.run query\n</code></pre>\n\n<p>The number of records returned can be specified.\n(See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"limit-instance\">Gcloud::Datastore::Query#limit</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\nquery = datastore.query(\"Task\").\n  limit(5)\n\ntasks = datastore.run query\n</code></pre>\n\n<p>Records’ key structures can also be queried.\n(See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"ancestor-instance\">Gcloud::Datastore::Query#ancestor</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask_list_key = datastore.key \"TaskList\", \"default\"\n\nquery = datastore.query(\"Task\").\n  ancestor(task_list_key)\n\ntasks = datastore.run query\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/query\">Gcloud::Datastore::Query</a> and <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"run-instance\">Gcloud::Datastore::Dataset#run</a></p>\n\n<h3 id=\"paginating-records\">Paginating records</h3>\n\n<p>All records may not return at once, requiring multiple calls to Datastore\nto return them all. The returned records will have a <tt>cursor</tt> if\nthere are more available.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask_list_key = datastore.key \"TaskList\", \"default\"\n\nquery = datastore.query(\"Task\").\n  ancestor(task_list_key)\nall_tasks = []\ntmp_tasks = datastore.run query\nwhile tmp_tasks.any? do\n  tmp_tasks.each do |task|\n    all_tasks &lt;&lt; task\n  end\n  # break loop if no more tasks available\n  break if tmp_tasks.cursor.nil?\n  # set cursor on the query\n  query = query.cursor tmp_tasks.cursor\n  # query for more records\n  tmp_tasks = datastore.run query\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/dataset/lookupresults\">Gcloud::Datastore::Dataset::LookupResults</a> and\n<a data-custom-type=\"gcloud/datastore/dataset/queryresults\">Gcloud::Datastore::Dataset::QueryResults</a></p>\n\n<h2 id=\"creating-records\">Creating records</h2>\n\n<p>New entities can be created and persisted buy calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"save-instance\">Gcloud::Datastore::Dataset#save</a>. The entity must have a key to be saved.\nIf the key is incomplete then it will be completed when saved.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\ntask.key.id #=&gt; nil\ndatastore.save task\ntask.key.id #=&gt; 123456\n</code></pre>\n\n<p>Multiple new entities may be created in a batch.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask1 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\n\ntask2 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Integrate Cloud Datastore\"\nend\n\ntasks = datastore.save(task1, task2)\ntask_key1 = tasks[0].key\ntask_key2 = tasks[1].key\n</code></pre>\n\n<p>Entities in Datastore form a hierarchically structured space similar to the\ndirectory structure of a file system. When you create an entity, you can\noptionally designate another entity as its parent; the new entity is a child\nof the parent entity.</p>\n\n<pre><code class=\"language-ruby\">task_key = datastore.key \"Task\", \"sampleTask\"\ntask_key.parent = datastore.key \"TaskList\", \"default\"\n\ntask = datastore.entity task_key do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Integrate Cloud Datastore\"\nend\n</code></pre>\n\n<h2 id=\"setting-properties\">Setting properties</h2>\n\n<p>Entities hold properties. A property has a name that is a string or symbol,\nand a value that is an object. Most value objects are supported, including\nString, Integer, Date, Time, and even other entity or key objects. Changes\nto the entity’s properties are persisted by calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"save-instance\">Gcloud::Datastore::Dataset#save</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask = datastore.find \"Task\", \"sampleTask\"\n# Read the priority property\ntask[\"priority\"] #=&gt; 4\n# Write the priority property\ntask[\"priority\"] = 5\n# Persist the changes\ndatastore.save task\n</code></pre>\n\n<p>Array properties can be used to store more than one value.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask = datastore.entity \"Task\", \"sampleTask\" do |t|\n  t[\"tags\"] = [\"fun\", \"programming\"]\n  t[\"collaborators\"] = [\"alice\", \"bob\"]\nend\n</code></pre>\n\n<h2 id=\"deleting-records\">Deleting records</h2>\n\n<p>Entities can be removed from Datastore by calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"delete-instance\">Gcloud::Datastore::Dataset#delete</a> and passing the entity object or the\nentity’s key object.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask = datastore.find \"Task\", \"sampleTask\"\ndatastore.delete task\n</code></pre>\n\n<p>Multiple entities may be deleted in a batch.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask_key1 = datastore.key \"Task\", \"sampleTask1\"\ntask_key2 = datastore.key \"Task\", \"sampleTask2\"\ndatastore.delete task_key1, task_key2\n</code></pre>\n\n<h2 id=\"transactions\">Transactions</h2>\n\n<p>Complex logic can be wrapped in a Transaction. All queries and updates\nwithin the <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"transaction-instance\">Gcloud::Datastore::Dataset#transaction</a> block are run within the\ntransaction scope, and will be automatically committed when the block\ncompletes.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask_key = datastore.key \"Task\", \"sampleTask\"\n\ndatastore.transaction do |tx|\n  if tx.find(task_key).nil?\n    task = datastore.entity task_key do |t|\n      t[\"type\"] = \"Personal\"\n      t[\"done\"] = false\n      t[\"priority\"] = 4\n      t[\"description\"] = \"Learn Cloud Datastore\"\n    end\n    tx.save task\n  end\nend\n</code></pre>\n\n<p>Alternatively, if no block is given the transaction object is returned\nallowing you to commit or rollback manually.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask_key = datastore.key \"Task\", \"sampleTask\"\n\ntx = datastore.transaction\nbegin\n  if tx.find(task_key).nil?\n    task = datastore.entity task_key do |t|\n      t[\"type\"] = \"Personal\"\n      t[\"done\"] = false\n      t[\"priority\"] = 4\n      t[\"description\"] = \"Learn Cloud Datastore\"\n    end\n    tx.save task\n  end\n  tx.commit\nrescue\n  tx.rollback\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/transaction\">Gcloud::Datastore::Transaction</a> and\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"transaction-instance\">Gcloud::Datastore::Dataset#transaction</a></p>\n\n<h2 id=\"querying-metadata\">Querying metadata</h2>\n\n<p>Datastore provides programmatic access to some of its metadata to support\nmeta-programming, implementing backend administrative functions, simplify\nconsistent caching, and similar purposes. The metadata available includes\ninformation about the entity groups, namespaces, entity kinds, and\nproperties your application uses, as well as the property representations\nfor each property.</p>\n\n<p>The special entity kind <code>__namespace__</code> can be used to find all the\nnamespaces used in your application entities.</p>\n\n<pre><code class=\"language-ruby\">query = datastore.query(\"__namespace__\").\n  select(\"__key__\").\n  where(\"__key__\", \"&gt;=\", datastore.key(\"__namespace__\", \"g\")).\n  where(\"__key__\", \"&lt;\", datastore.key(\"__namespace__\", \"h\"))\n\nnamespaces = datastore.run(query).map do |entity|\n  entity.key.name\nend\n</code></pre>\n\n<p>The special entity kind <code>__kind__</code> can be used to return all the\nkinds used in your application.</p>\n\n<pre><code class=\"language-ruby\">query = datastore.query(\"__kind__\").\n  select(\"__key__\")\n\nkinds = datastore.run(query).map do |entity|\n  entity.key.name\nend\n</code></pre>\n\n<p>Property queries return entities of kind <code>__property__</code> denoting the indexed\nproperties associated with an entity kind. (Unindexed properties are not\nincluded.)</p>\n\n<pre><code class=\"language-ruby\">query = datastore.query(\"__property__\").\n  select(\"__key__\")\n\nentities = datastore.run(query)\nproperties_by_kind = entities.each_with_object({}) do |entity, memo|\n  kind = entity.key.parent.name\n  prop = entity.key.name\n  memo[kind] ||= []\n  memo[kind] &lt;&lt; prop\nend\n</code></pre>\n\n<p>Property queries support ancestor filtering on a <code>__kind__</code> or\n<code>__property__</code> key, to limit the query results to a single kind or property.\nThe <code>property_representation</code> property in the entity representing property\n<code>p</code> of kind <code>k</code> is an array containing all representations of <code>p</code>’s value in\nany entity of kind <code>k</code>.</p>\n\n<pre><code class=\"language-ruby\">ancestor_key = datastore.key \"__kind__\", \"Task\"\nquery = datastore.query(\"__property__\").\n  ancestor(ancestor_key)\n\nentities = datastore.run(query)\nrepresentations = entities.each_with_object({}) do |entity, memo|\n  property_name = entity.key.name\n  property_types = entity[\"property_representation\"]\n  memo[property_name] = property_types\nend\n</code></pre>\n\n<p>Property queries can also be filtered with a range over the pseudo-property\n<code>__key__</code>, where the keys denote either <code>__kind__</code> or <code>__property__</code>\nentities.</p>\n\n<pre><code class=\"language-ruby\">start_key = datastore.key \"__property__\", \"priority\"\nstart_key.parent = datastore.key \"__kind__\", \"Task\"\nquery = datastore.query(\"__property__\").\n  select(\"__key__\").\n  where(\"__key__\", \"&gt;=\", start_key)\n\nentities = datastore.run(query)\nproperties_by_kind = entities.each_with_object({}) do |entity, memo|\n  kind = entity.key.parent.name\n  prop = entity.key.name\n  memo[kind] ||= []\n  memo[kind] &lt;&lt; prop\nend\n</code></pre>\n\n<h2 id=\"the-datastore-emulator\">The Datastore Emulator</h2>\n\n<p>As of this release, the Datastore emulator that is part of the gcloud SDK is\nno longer compatible with gcloud-ruby. This is because the gcloud SDK’s\nDatastore emulator does not yet support gRPC as a transport layer.</p>\n\n<p>A gRPC-compatible emulator is available until the gcloud SDK Datastore\nemulator supports gRPC. To use it you must <a href=\"https://storage.googleapis.com/gcd/tools/gcd-grpc-1.0.0.zip\">download the gRPC\nemulator</a> and\nuse the <code>gcd.sh</code> script.</p>\n\n<p>When you run the gRPC emulator you will see a message similar to the\nfollowing printed:</p>\n\n<pre><code>If you are using a library that supports the DATASTORE_EMULATOR_HOST\nenvironment variable, run:\n\nexport DATASTORE_EMULATOR_HOST=localhost:8978\n</code></pre>\n\n<p>Now you can connect to the emulator using the <code>DATASTORE_EMULATOR_HOST</code>\nenvironment variable:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\n# Make Datastore use the emulator\nENV[\"DATASTORE_EMULATOR_HOST\"] = \"localhost:8978\"\n\ngcloud = Gcloud.new \"emulator-project-id\"\ndatastore = gcloud.datastore\n\ntask = datastore.entity \"Task\", \"emulatorTask\" do |t|\n  t[\"type\"] = \"Testing\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Use Datastore Emulator\"\nend\n\ndatastore.save task\n</code></pre>","source":"lib/gcloud/datastore.rb#L566","resources":[],"examples":[],"methods":[]}