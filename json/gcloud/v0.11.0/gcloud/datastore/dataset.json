{"id":"gcloud/datastore/dataset","name":"Dataset","title":["Gcloud","Datastore","Dataset"],"description":"<h1 id=\"dataset\">Dataset</h1>\n\n<p>Dataset is the data saved in a project’s Datastore.\nDataset is analogous to a database in relational database world.</p>\n\n<p>Gcloud::Datastore::Dataset is the main object for interacting with\nGoogle Datastore. <a data-custom-type=\"gcloud/datastore/entity\">Gcloud::Datastore::Entity</a> objects are created,\nread, updated, and deleted by Gcloud::Datastore::Dataset.</p>\n\n<p>See <a data-custom-type=\"gcloud\" data-method=\"datastore-instance\">Gcloud#datastore</a></p>","source":"lib/gcloud/datastore/dataset.rb#L54","resources":[],"examples":[{"caption":"","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\nquery = datastore.query(\"Task\").\n  where(\"done\", \"=\", false)\n\ntasks = datastore.run query"}],"methods":[{"id":"project-instance","type":"instance","name":"project","title":["Gcloud","Datastore","Dataset#project"],"description":"<p>The Datastore project connected to.</p>","source":"lib/gcloud/datastore/dataset.rb#L81","resources":[],"examples":[{"caption":"","code":"require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\n\ndatastore = gcloud.datastore\ndatastore.project #=> \"my-todo-project\""}],"params":[],"exceptions":[],"returns":[]},{"id":"allocate_ids-instance","type":"instance","name":"allocate_ids","title":["Gcloud","Datastore","Dataset#allocate_ids"],"description":"<p>Generate IDs for a Key before creating an entity.</p>","source":"lib/gcloud/datastore/dataset.rb#L107","resources":[],"examples":[{"caption":"","code":"task_key = datastore.key \"Task\"\ntask_keys = datastore.allocate_ids task_key, 5"}],"params":[{"name":"incomplete_key","types":["Key"],"description":"A Key without <code>id</code> or <code>name</code> set.","optional":false,"nullable":false},{"name":"count","types":["String"],"description":"The number of new key IDs to create.","optional":true,"default":"1","nullable":false}],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"gcloud/datastore/key\">Gcloud::Datastore::Key</a>&gt;"],"description":""}]},{"id":"save-instance","type":"instance","name":"save","title":["Gcloud","Datastore","Dataset#save"],"description":"<p>Persist one or more entities to the Datastore.</p>","source":"lib/gcloud/datastore/dataset.rb#L160","resources":[],"examples":[{"caption":"<p>Insert a new entity:</p>","code":"task = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\ntask.key.id #=> nil\ndatastore.save task\ntask.key.id #=> 123456"},{"caption":"<p>Insert multiple new entities in a batch:</p>","code":"task1 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\n\ntask2 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Integrate Cloud Datastore\"\nend\n\ntask_key1, task_key2 = datastore.save(task1, task2).map(&:key)"},{"caption":"<p>Update an existing entity:</p>","code":"task = datastore.find \"Task\", \"sampleTask\"\ntask[\"priority\"] = 5\ndatastore.save task"}],"params":[{"name":"entities","types":["Entity"],"description":"One or more entity objects to be saved.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"gcloud/datastore/entity\">Gcloud::Datastore::Entity</a>&gt;"],"description":""}]},{"id":"insert-instance","type":"instance","name":"insert","title":["Gcloud","Datastore","Dataset#insert"],"description":"<p>Insert one or more entities to the Datastore. An InvalidArgumentError\nwill raised if the entities cannot be inserted.</p>","source":"lib/gcloud/datastore/dataset.rb#L201","resources":[],"examples":[{"caption":"<p>Insert a new entity:</p>","code":"task = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\ntask.key.id #=> nil\ndatastore.insert task\ntask.key.id #=> 123456"},{"caption":"<p>Insert multiple new entities in a batch:</p>","code":"task1 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\n\ntask2 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Integrate Cloud Datastore\"\nend\n\ntask_key1, task_key2 = datastore.insert(task1, task2).map(&:key)"}],"params":[{"name":"entities","types":["Entity"],"description":"One or more entity objects to be inserted.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"gcloud/datastore/entity\">Gcloud::Datastore::Entity</a>&gt;"],"description":""}]},{"id":"update-instance","type":"instance","name":"update","title":["Gcloud","Datastore","Dataset#update"],"description":"<p>Update one or more entities to the Datastore. An InvalidArgumentError\nwill raised if the entities cannot be updated.</p>","source":"lib/gcloud/datastore/dataset.rb#L224","resources":[],"examples":[{"caption":"<p>Update an existing entity:</p>","code":"task = datastore.find \"Task\", \"sampleTask\"\ntask[\"done\"] = true\ndatastore.save task"},{"caption":"<p>update multiple new entities in a batch:</p>","code":"query = datastore.query(\"Task\").where(\"done\", \"=\", false)\ntasks = datastore.run query\ntasks.each { |t| t[\"done\"] = true }\ndatastore.update tasks"}],"params":[{"name":"entities","types":["Entity"],"description":"One or more entity objects to be updated.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"gcloud/datastore/entity\">Gcloud::Datastore::Entity</a>&gt;"],"description":""}]},{"id":"delete-instance","type":"instance","name":"delete","title":["Gcloud","Datastore","Dataset#delete"],"description":"<p>Remove entities from the Datastore.</p>","source":"lib/gcloud/datastore/dataset.rb#L241","resources":[],"examples":[{"caption":"","code":"gcloud = Gcloud.new\ndatastore = gcloud.datastore\ndatastore.delete task1, task2"}],"params":[{"name":"entities_or_keys","types":["Entity","Key"],"description":"One or more Entity or Key objects\nto remove.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Boolean"],"description":"Returns <code>true</code> if successful"}]},{"id":"commit-instance","type":"instance","name":"commit","title":["Gcloud","Datastore","Dataset#commit"],"description":"<p>Make multiple changes in a single commit.</p>","source":"lib/gcloud/datastore/dataset.rb#L263","resources":[],"examples":[{"caption":"","code":"gcloud = Gcloud.new\ndatastore = gcloud.datastore\ndatastore.commit do |c|\n  c.save task3, task4\n  c.delete task1, task2\nend"}],"params":[{"name":"yield","types":["block"],"description":"a block for making changes","optional":true,"nullable":false},{"name":"yield.commit","types":["Commit"],"description":"The object that changes are made on","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"gcloud/datastore/entity\">Gcloud::Datastore::Entity</a>&gt;"],"description":"The entities that were\npersisted."}]},{"id":"find-instance","type":"instance","name":"find","title":["Gcloud","Datastore","Dataset#find"],"description":"<p>Retrieve an entity by key.</p>","source":"lib/gcloud/datastore/dataset.rb#L306","resources":[],"examples":[{"caption":"<p>Finding an entity with a key:</p>","code":"task_key = datastore.key \"Task\", \"sampleTask\"\ntask = datastore.find task_key"},{"caption":"<p>Finding an entity with a <code>kind</code> and <code>id</code>/<code>name</code>:</p>","code":"task = datastore.find \"Task\", \"sampleTask\""}],"params":[{"name":"key_or_kind","types":["Key","String"],"description":"A Key object or <code>kind</code> string value.","optional":false,"nullable":false},{"name":"id_or_name","types":["Integer","String","nil"],"description":"The Key’s <code>id</code> or <code>name</code> value\nif a <code>kind</code> was provided in the first parameter.","optional":true,"default":"nil","nullable":true},{"name":"consistency","types":["Symbol"],"description":"The non-transactional read consistency to\nuse. Cannot be set to <code>:strong</code> for global queries. Accepted values\nare <code>:eventual</code> and <code>:strong</code>.</p>\n\n<p>The default consistency depends on the type of lookup used. See\n<a href=\"https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore/#h.tf76fya5nqk8\">Eventual Consistency in Google Cloud\nDatastore</a>\nfor more information.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/datastore/entity\">Gcloud::Datastore::Entity</a>","nil"],"description":""}]},{"id":"find_all-instance","type":"instance","name":"find_all","title":["Gcloud","Datastore","Dataset#find_all"],"description":"<p>Retrieve the entities for the provided keys. The order of results is\nundefined and has no relation to the order of <code>keys</code> arguments.</p>","source":"lib/gcloud/datastore/dataset.rb#L339","resources":[],"examples":[{"caption":"","code":"gcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask_key1 = datastore.key \"Task\", \"sampleTask1\"\ntask_key2 = datastore.key \"Task\", \"sampleTask2\"\ntasks = datastore.find_all task_key1, task_key2"}],"params":[{"name":"keys","types":["Key"],"description":"One or more Key objects to find records for.","optional":false,"nullable":false},{"name":"consistency","types":["Symbol"],"description":"The non-transactional read consistency to\nuse. Cannot be set to <code>:strong</code> for global queries. Accepted values\nare <code>:eventual</code> and <code>:strong</code>.</p>\n\n<p>The default consistency depends on the type of lookup used. See\n<a href=\"https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore/#h.tf76fya5nqk8\">Eventual Consistency in Google Cloud\nDatastore</a>\nfor more information.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/datastore/dataset/lookupresults\">Gcloud::Datastore::Dataset::LookupResults</a>"],"description":""}]},{"id":"run-instance","type":"instance","name":"run","title":["Gcloud","Datastore","Dataset#run"],"description":"<p>Retrieve entities specified by a Query.</p>","source":"lib/gcloud/datastore/dataset.rb#L393","resources":[],"examples":[{"caption":"","code":"query = datastore.query(\"Task\").\n  where(\"done\", \"=\", false)\ntasks = datastore.run query"},{"caption":"<p>Run an ancestor query with eventual consistency:</p>","code":"task_list_key = datastore.key \"TaskList\", \"default\"\nquery.kind(\"Task\").\n  ancestor(task_list_key)\n\ntasks = datastore.run query, consistency: :eventual"},{"caption":"<p>Run the query within a namespace with the <code>namespace</code> option:</p>","code":"query = datastore.query(\"Task\").\n  where(\"done\", \"=\", false)\ntasks = datastore.run query, namespace: \"ns~todo-project\""},{"caption":"<p>Run the query with a GQL string.</p>","code":"gql_query = datastore.gql \"SELECT * FROM Task WHERE done = @done\",\n                          done: false\ntasks = datastore.run gql_query"},{"caption":"<p>Run the GQL query within a namespace with <code>namespace</code> option:</p>","code":"gql_query = datastore.gql \"SELECT * FROM Task WHERE done = @done\",\n                          done: false\ntasks = datastore.run gql_query, namespace: \"ns~todo-project\""}],"params":[{"name":"query","types":["Query","GqlQuery"],"description":"The object with the search criteria.","optional":false,"nullable":false},{"name":"namespace","types":["String"],"description":"The namespace the query is to run within.","optional":true,"default":"nil","nullable":true},{"name":"consistency","types":["Symbol"],"description":"The non-transactional read consistency to\nuse. Cannot be set to <code>:strong</code> for global queries. Accepted values\nare <code>:eventual</code> and <code>:strong</code>.</p>\n\n<p>The default consistency depends on the type of query used. See\n<a href=\"https://cloud.google.com/datastore/docs/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore/#h.tf76fya5nqk8\">Eventual Consistency in Google Cloud\nDatastore</a>\nfor more information.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/datastore/dataset/queryresults\">Gcloud::Datastore::Dataset::QueryResults</a>"],"description":""}]},{"id":"transaction-instance","type":"instance","name":"transaction","title":["Gcloud","Datastore","Dataset#transaction"],"description":"<p>Creates a Datastore Transaction.</p>","source":"lib/gcloud/datastore/dataset.rb#L455","resources":[],"examples":[{"caption":"<p>Runs the given block in a database transaction:</p>","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask = datastore.entity \"Task\", \"sampleTask\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\n\ndatastore.transaction do |tx|\n  if tx.find(task.key).nil?\n    tx.save task\n  end\nend"},{"caption":"<p>If no block is given, a Transaction object is returned:</p>","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\ndatastore = gcloud.datastore\n\ntask = datastore.entity \"Task\", \"sampleTask\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\n\ntx = datastore.transaction\nbegin\n  if tx.find(task.key).nil?\n    tx.save task\n  end\n  tx.commit\nrescue\n  tx.rollback\nend"}],"params":[{"name":"yield","types":["block"],"description":"a block yielding a new transaction","optional":true,"nullable":false},{"name":"yield.tx","types":["Transaction"],"description":"the transaction object","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"query-instance","type":"instance","name":"query","title":["Gcloud","Datastore","Dataset#query"],"description":"<p>Create a new Query instance. This is a convenience method to make the\ncreation of Query objects easier.</p>","source":"lib/gcloud/datastore/dataset.rb#L493","resources":[],"examples":[{"caption":"","code":"query = datastore.query(\"Task\").\n  where(\"done\", \"=\", false)\ntasks = datastore.run query"},{"caption":"<p>The previous example is equivalent to:</p>","code":"query = Gcloud::Datastore::Query.new.\n  kind(\"Task\").\n  where(\"done\", \"=\", false)\ntasks = datastore.run query"}],"params":[{"name":"kinds","types":["String"],"description":"The kind of entities to query. This is optional.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/datastore/query\">Gcloud::Datastore::Query</a>"],"description":""}]},{"id":"gql-instance","type":"instance","name":"gql","title":["Gcloud","Datastore","Dataset#gql"],"description":"<p>Create a new GqlQuery instance. This is a convenience method to make the\ncreation of GqlQuery objects easier.</p>","source":"lib/gcloud/datastore/dataset.rb#L522","resources":[],"examples":[{"caption":"","code":"gql_query = datastore.gql \"SELECT * FROM Task WHERE done = @done\",\n                          done: false\ntasks = datastore.run gql_query"},{"caption":"<p>The previous example is equivalent to:</p>","code":"gql_query = Gcloud::Datastore::GqlQuery.new\ngql_query.query_string = \"SELECT * FROM Task WHERE done = @done\"\ngql_query.named_bindings = {done: false}\ntasks = datastore.run gql_query"}],"params":[{"name":"query","types":["String"],"description":"The GQL query string.","optional":false,"nullable":false},{"name":"bindings","types":["Hash"],"description":"Named bindings for the GQL query string, each\nkey must match regex <code>[A-Za-z_$][A-Za-z_$0-9]*</code>, must not match regex\n<code>__.*__</code>, and must not be <code>\"\"</code>. The value must be an <code>Object</code> that can\nbe stored as an Entity property value, or a <code>Cursor</code>.","optional":true,"default":"{}","nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/datastore/gqlquery\">Gcloud::Datastore::GqlQuery</a>"],"description":""}]},{"id":"key-instance","type":"instance","name":"key","title":["Gcloud","Datastore","Dataset#key"],"description":"<p>Create a new Key instance. This is a convenience method to make the\ncreation of Key objects easier.</p>","source":"lib/gcloud/datastore/dataset.rb#L577","resources":[],"examples":[{"caption":"","code":"task_key = datastore.key \"Task\", \"sampleTask\""},{"caption":"<p>The previous example is equivalent to:</p>","code":"task_key = Gcloud::Datastore::Key.new \"Task\", \"sampleTask\""},{"caption":"<p>Create an empty key:</p>","code":"key = datastore.key"},{"caption":"<p>Create an incomplete key:</p>","code":"key = datastore.key \"User\""},{"caption":"<p>Create a key with a parent:</p>","code":"key = datastore.key [[\"TaskList\", \"default\"], [\"Task\", \"sampleTask\"]]\nkey.path #=> [[\"TaskList\", \"default\"], [\"Task\", \"sampleTask\"]]"},{"caption":"<p>Create a key with multi-level ancestry:</p>","code":"key = datastore.key([\n  [\"User\", \"alice\"],\n  [\"TaskList\", \"default\"],\n  [\"Task\", \"sampleTask\"]\n])\nkey.path #=> [[\"User\", \"alice\"], [\"TaskList\", \"default\"], [ ... ]]"},{"caption":"<p>Create an incomplete key with a parent:</p>","code":"key = datastore.key \"TaskList\", \"default\", \"Task\"\nkey.path #=> [[\"TaskList\", \"default\"], [\"Task\", nil]]"},{"caption":"<p>Create a key with a project and namespace:</p>","code":"key = datastore.key [\"TaskList\", \"default\"], [\"Task\", \"sampleTask\"],\n                    project: \"my-todo-project\",\n                    namespace: \"ns~todo-project\"\nkey.path #=> [[\"TaskList\", \"default\"], [\"Task\", \"sampleTask\"]]\nkey.project #=> \"my-todo-project\",\nkey.namespace #=> \"ns~todo-project\""}],"params":[{"name":"path","types":["Array<Array(String,(String|Integer|nil))>"],"description":"An optional list\nof pairs for the key’s path. Each pair may include the key’s kind\n(String) and an id (Integer) or name (String). This is optional.","optional":false,"nullable":false},{"name":"project","types":["String"],"description":"The project of the Key. This is optional.","optional":true,"default":"nil","nullable":true},{"name":"namespace","types":["String"],"description":"namespace kind of the Key. This is optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/datastore/key\">Gcloud::Datastore::Key</a>"],"description":""}]},{"id":"entity-instance","type":"instance","name":"entity","title":["Gcloud","Datastore","Dataset#entity"],"description":"<p>Create a new empty Entity instance. This is a convenience method to make\nthe creation of Entity objects easier.</p>","source":"lib/gcloud/datastore/dataset.rb#L639","resources":[],"examples":[{"caption":"","code":"task = datastore.entity"},{"caption":"<p>The previous example is equivalent to:</p>","code":"task = Gcloud::Datastore::Entity.new"},{"caption":"<p>The key can also be passed in as an object:</p>","code":"task_key = datastore.key \"Task\", \"sampleTask\"\ntask = datastore.entity task_key"},{"caption":"<p>Or the key values can be passed in as parameters:</p>","code":"task = datastore.entity \"Task\", \"sampleTask\""},{"caption":"<p>The previous example is equivalent to:</p>","code":"task_key = Gcloud::Datastore::Key.new \"Task\", \"sampleTask\"\ntask = Gcloud::Datastore::Entity.new\ntask.key = task_key"},{"caption":"<p>The newly created entity can also be configured using a block:</p>","code":"task = datastore.entity \"Task\", \"sampleTask\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend"},{"caption":"<p>The previous example is equivalent to:</p>","code":"task_key = Gcloud::Datastore::Key.new \"Task\", \"sampleTask\"\ntask = Gcloud::Datastore::Entity.new\ntask.key = task_key\ntask[\"type\"] = \"Personal\"\ntask[\"done\"] = false\ntask[\"priority\"] = 4\ntask[\"description\"] = \"Learn Cloud Datastore\""}],"params":[{"name":"key_or_path","types":["Key","Array<Array(String,(String|Integer|nil))>"],"description":"An\noptional list of pairs for the key’s path. Each pair may include the #\nkey’s kind (String) and an id (Integer) or name (String). This is #\noptional.","optional":false,"nullable":false},{"name":"project","types":["String"],"description":"The project of the Key. This is optional.","optional":true,"default":"nil","nullable":true},{"name":"namespace","types":["String"],"description":"namespace kind of the Key. This is optional.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"a block yielding a new entity","optional":true,"nullable":false},{"name":"yield.entity","types":["Entity"],"description":"the newly created entity object","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"gcloud/datastore/entity\">Gcloud::Datastore::Entity</a>"],"description":""}]}]}