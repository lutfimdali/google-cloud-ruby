{"id":"gcloud/logging","name":"Logging","title":["Gcloud","Logging"],"description":"<h1 id=\"google-cloud-logging\">Google Cloud Logging</h1>\n\n<p>The Google Cloud Logging service collects and stores logs from applications\nand services on the Google Cloud Platform, giving you fine-grained,\nprogrammatic control over your projects’ logs. You can use the Cloud Logging\nAPI to:</p>\n\n<ul>\n  <li><a href=\"#listing-log-entries\">Read and filter log entries</a></li>\n  <li><a href=\"#exporting-log-entries\">Export your log entries</a> to Cloud Storage,\nBigQuery, or Cloud Pub/Sub</li>\n  <li><a href=\"#creating-logs-based-metrics\">Create logs-based metrics</a> for use in Cloud\nMonitoring</li>\n  <li><a href=\"#writing-log-entries\">Write log entries</a></li>\n</ul>\n\n<p>For general information about Cloud Logging, read <a href=\"https://cloud.google.com/logging/docs/\">What is Google Cloud\nLogging?</a>.</p>\n\n<p>Gcloud’s goal is to provide an API that is familiar and comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"gcloud\" data-method=\"logging-instance\">Gcloud#logging</a>. You can provide the\nproject and credential information to connect to the Cloud Logging service,\nor if you are running on Google Compute Engine this configuration is taken\ncare of for you. You can read more about the options for connecting in the\n<a href=\"https://googlecloudplatform.github.io/gcloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"listing-log-entries\">Listing log entries</h2>\n\n<p>Cloud Logging gathers log entries from many services, including Google App\nEngine and Google Compute Engine. (See the <a href=\"https://cloud.google.com/logging/docs/view/logs_index\">List of Log\nTypes</a>.) In addition,\nyou can write your own log entries to the service.</p>\n\n<p><a data-custom-type=\"gcloud/logging/project\" data-method=\"entries-instance\">Gcloud::Logging::Project#entries</a> returns the <a data-custom-type=\"gcloud/logging/entry\">Gcloud::Logging::Entry</a>\nrecords belonging to your project:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nentries = logging.entries\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}\"\nend\n</code></pre>\n\n<p>You can narrow the results to a single log using an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs\nfilter</a>. A\nlog is a named collection of entries. Logs can be produced by Google Cloud\nPlatform services, by third-party services, or by your applications. For\nexample, the log <code>compute.googleapis.com/activity_log</code> is produced by Google\nCompute Engine. Logs are simply referenced by name in Gcloud. There is no\n<code>Log</code> type in Gcloud or <code>Log</code> resource in the Cloud Logging API.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nentries = logging.entries filter: \"log:syslog\"\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.payload.inspect}\"\nend\n</code></pre>\n\n<p>You can also order the log entries by <code>timestamp</code>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nentries = logging.entries order: \"timestamp desc\"\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}\"\nend\n</code></pre>\n\n<h2 id=\"exporting-log-entries\">Exporting log entries</h2>\n\n<p>Cloud Logging lets you export log entries to destinations including Google\nCloud Storage buckets (for long term log storage), Google BigQuery datasets\n(for log analysis), and Google Pub/Sub (for streaming to other\napplications).</p>\n\n<h3 id=\"creating-sinks\">Creating sinks</h3>\n\n<p>A <a data-custom-type=\"gcloud/logging/sink\">Gcloud::Logging::Sink</a> is an object that lets you to specify a set of log\nentries to export.</p>\n\n<p>In addition to the name of the sink and the export destination,\n<a data-custom-type=\"gcloud/logging/project\" data-method=\"create_sink-instance\">Gcloud::Logging::Project#create_sink</a> accepts an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced\nlogs filter</a> to\nnarrow the collection.</p>\n\n<p>Before creating the sink, ensure that you have granted\n<code>cloud-logs@google.com</code> permission to write logs to the destination. See\n<a href=\"https://cloud.google.com/logging/docs/export/configure_export#setting_product_name_short_permissions_for_writing_exported_logs\">Permissions for writing exported\nlogs</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nstorage = gcloud.storage\n\nbucket = storage.create_bucket \"my-logs-bucket\"\n\n# Grant owner permission to Cloud Logging service\nemail = \"cloud-logs@google.com\"\nbucket.acl.add_owner \"group-#{email}\"\n\nsink = logging.create_sink \"my-sink\", \"storage.googleapis.com/#{bucket.id}\"\n</code></pre>\n\n<p>When you create a sink, only new log entries are exported. Cloud Logging\ndoes not send previously-ingested log entries to the sink’s destination.</p>\n\n<h3 id=\"listing-sinks\">Listing sinks</h3>\n\n<p>You can also list the sinks belonging to your project with\n<a data-custom-type=\"gcloud/logging/project\" data-method=\"sinks-instance\">Gcloud::Logging::Project#sinks</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nsinks = logging.sinks\nsinks.each do |s|\n  puts \"#{s.name}: #{s.filter} -&gt; #{s.destination}\"\nend\n</code></pre>\n\n<h2 id=\"creating-logs-based-metrics\">Creating logs-based metrics</h2>\n\n<p>You can use log entries in your project as the basis for <a href=\"https://cloud.google.com/monitoring/docs\">Google Cloud\nMonitoring</a> metrics. These metrics\ncan then be used to produce Cloud Monitoring reports and alerts.</p>\n\n<h3 id=\"creating-metrics\">Creating metrics</h3>\n\n<p>A metric is a measured value that can be used to assess a system. Use\n<a data-custom-type=\"gcloud/logging/project\" data-method=\"create_metric-instance\">Gcloud::Logging::Project#create_metric</a> to configure a\n<a data-custom-type=\"gcloud/logging/metric\">Gcloud::Logging::Metric</a> based on a collection of log entries matching an\n<a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced\nlogs filter</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nmetric = logging.create_metric \"errors\", \"severity&gt;=ERROR\"\n</code></pre>\n\n<h3 id=\"listing-metrics\">Listing metrics</h3>\n\n<p>You can also list the metrics belonging to your project with\n<a data-custom-type=\"gcloud/logging/project\" data-method=\"metrics-instance\">Gcloud::Logging::Project#metrics</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\nmetrics = logging.metrics\nmetrics.each do |m|\n  puts \"#{m.name}: #{m.filter}\"\nend\n</code></pre>\n\n<h2 id=\"writing-log-entries\">Writing log entries</h2>\n\n<p>An <a data-custom-type=\"gcloud/logging/entry\">Gcloud::Logging::Entry</a> is composed of metadata and a payload. The\npayload is traditionally a message string, but in Cloud Logging it can\nalso be a JSON or protocol buffer object. A single log can have entries with\ndifferent payload types. In addition to the payload, your argument(s) to\n<a data-custom-type=\"gcloud/logging/project\" data-method=\"write_entries-instance\">Gcloud::Logging::Project#write_entries</a> must also contain a log name and a\nresource.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\n\nentry = logging.entry\nentry.payload = \"Job started.\"\nentry.log_name = \"my_app_log\"\nentry.resource.type = \"gae_app\"\nentry.resource.labels[:module_id] = \"1\"\nentry.resource.labels[:version_id] = \"20150925t173233\"\n\nlogging.write_entries entry\n</code></pre>\n\n<p>If you write a collection of log entries, you can provide the log name,\nresource, and/or labels hash to be used for all of the entries, and omit\nthese values from the individual entries.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\n\nentry1 = logging.entry\nentry1.payload = \"Job started.\"\nentry2 = logging.entry\nentry2.payload = \"Job completed.\"\nlabels = { job_size: \"large\", job_code: \"red\" }\n\nresource = logging.resource \"gae_app\",\n                            \"module_id\" =&gt; \"1\",\n                            \"version_id\" =&gt; \"20150925t173233\"\n\nlogging.write_entries [entry1, entry2],\n                      log_name: \"my_app_log\",\n                      resource: resource,\n                      labels: labels\n</code></pre>\n\n<h3 id=\"creating-a-ruby-logger-implementation\">Creating a Ruby Logger implementation</h3>\n\n<p>If your environment requires a logger instance that is API-compatible with\nRuby’s standard library\n<a href=\"http://ruby-doc.org/stdlib/libdoc/logger/rdoc\">Logger</a>, you can use\n<a data-custom-type=\"gcloud/logging/project\" data-method=\"logger-instance\">Gcloud::Logging::Project#logger</a> to create one.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nlogging = gcloud.logging\n\nresource = logging.resource \"gae_app\",\n                            module_id: \"1\",\n                            version_id: \"20150925t173233\"\n\nlogger = logging.logger \"my_app_log\", resource, env: :production\nlogger.info \"Job started.\"\n</code></pre>\n\n<h2 id=\"configuring-backoff\">Configuring Backoff</h2>\n\n<p>The <a data-custom-type=\"gcloud/backoff\">Gcloud::Backoff</a> class allows users to globally configure how Cloud API\nrequests are automatically retried in the case of some errors, such as a\n<code>500</code> or <code>503</code> status code, or a specific internal error code such as\n<code>rateLimitExceeded</code>.</p>\n\n<p>If an API call fails, the response will be inspected to see if the call\nshould be retried. If the response matches the criteria, then the request\nwill be retried after a delay. If another error occurs, the delay will be\nincreased incrementally before a subsequent attempt. The first retry will be\ndelayed one second, the second retry two seconds, and so on.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\nrequire \"gcloud/backoff\"\n\nGcloud::Backoff.retries = 5 # Raise the maximum number of retries from 3\n</code></pre>","source":"lib/gcloud/logging.rb#L325","resources":[],"examples":[],"methods":[]}