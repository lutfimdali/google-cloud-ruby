{"id":"gcloud/pubsub","name":"Pubsub","title":["Gcloud","Pubsub"],"description":"<h1 id=\"google-cloud-pubsub\">Google Cloud Pub/Sub</h1>\n\n<p>Google Cloud Pub/Sub is designed to provide reliable, many-to-many,\nasynchronous messaging between applications. Publisher applications can\nsend messages to a “topic” and other applications can subscribe to that\ntopic to receive the messages. By decoupling senders and receivers, Google\nCloud Pub/Sub allows developers to communicate between independently written\napplications.</p>\n\n<p>Gcloud’s goal is to provide a API that is familiar and comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"gcloud\" data-method=\"pubsub-instance\">Gcloud#pubsub</a>. You can provide the\nproject and credential information to connect to the Pub/Sub service, or if\nyou are running on Google Compute Engine this configuration is taken care\nof for you.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\"\n</code></pre>\n\n<p>To learn more about Pub/Sub, read the <a href=\"https://cloud.google.com/pubsub/overview\">Google Cloud Pub/Sub Overview\n</a>.</p>\n\n<h2 id=\"retrieving-topics\">Retrieving Topics</h2>\n\n<p>A Topic is a named resource to which messages are sent by publishers.\nA Topic is found by its name. (See <a data-custom-type=\"gcloud/pubsub/project\" data-method=\"topic-instance\">Gcloud::Pubsub::Project#topic</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"my-topic\"\n</code></pre>\n\n<h2 id=\"creating-a-topic\">Creating a Topic</h2>\n\n<p>A Topic is created from a Project. (See\n<a data-custom-type=\"gcloud/pubsub/project\" data-method=\"create_topic-instance\">Gcloud::Pubsub::Project#create_topic</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.create_topic \"my-topic\"\n</code></pre>\n\n<h2 id=\"retrieving-subscriptions\">Retrieving Subscriptions</h2>\n\n<p>A Subscription is a named resource representing the stream of messages from\na single, specific Topic, to be delivered to the subscribing application. A\nSubscription is found by its name. (See\n<a data-custom-type=\"gcloud/pubsub/topic\" data-method=\"subscription-instance\">Gcloud::Pubsub::Topic#subscription</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsubscription = topic.subscription \"my-topic-subscription\"\nputs subscription.name\n</code></pre>\n\n<h2 id=\"creating-a-subscription\">Creating a Subscription</h2>\n\n<p>A Subscription is created from a Topic. (See\n<a data-custom-type=\"gcloud/pubsub/topic\" data-method=\"subscribe-instance\">Gcloud::Pubsub::Topic#subscribe</a> and <a data-custom-type=\"gcloud/pubsub/project\" data-method=\"subscribe-instance\">Gcloud::Pubsub::Project#subscribe</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\"\nputs sub.name # =&gt; \"my-topic-sub\"\n</code></pre>\n\n<p>The subscription can be created that specifies the number of seconds to\nwait to be acknowledged as well as an endpoint URL to push the messages to:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\",\n                      deadline: 120,\n                      endpoint: \"https://example.com/push\"\n</code></pre>\n\n<h2 id=\"publishing-messages\">Publishing Messages</h2>\n\n<p>Messages are published to a topic. Any message published to a topic without\na subscription will be lost. Ensure the topic has a subscription before\npublishing. (See <a data-custom-type=\"gcloud/pubsub/topic\" data-method=\"publish-instance\">Gcloud::Pubsub::Topic#publish</a> and\n<a data-custom-type=\"gcloud/pubsub/project\" data-method=\"publish-instance\">Gcloud::Pubsub::Project#publish</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"new-message\"\n</code></pre>\n\n<p>Messages can also be published with attributes:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"new-message\",\n                    foo: :bar,\n                    this: :that\n</code></pre>\n\n<p>Multiple messages can be published at the same time by passing a block:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nmsgs = topic.publish do |batch|\n  batch.publish \"new-message-1\", foo: :bar\n  batch.publish \"new-message-2\", foo: :baz\n  batch.publish \"new-message-3\", foo: :bif\nend\n</code></pre>\n\n<h2 id=\"pulling-messages\">Pulling Messages</h2>\n\n<p>Messages are pulled from a Subscription. (See\n<a data-custom-type=\"gcloud/pubsub/subscription\" data-method=\"pull-instance\">Gcloud::Pubsub::Subscription#pull</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nmsgs = sub.pull\n</code></pre>\n\n<p>A maximum number of messages returned can also be specified:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\", max: 10\nmsgs = sub.pull\n</code></pre>\n\n<p>The request for messages can also block until messages are available.\n(See <a data-custom-type=\"gcloud/pubsub/subscription\" data-method=\"wait_for_messages-instance\">Gcloud::Pubsub::Subscription#wait_for_messages</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nmsgs = sub.wait_for_messages\n</code></pre>\n\n<h2 id=\"acknowledging-a-message\">Acknowledging a Message</h2>\n\n<p>Messages that are received can be acknowledged in Pub/Sub, marking the\nmessage to be removed so it cannot be pulled again.</p>\n\n<p>A Message that can be acknowledged is called a ReceivedMessage.\nReceivedMessages can be acknowledged one at a time:\n(See <a data-custom-type=\"gcloud/pubsub/receivedmessage\" data-method=\"acknowledge!-instance\">Gcloud::Pubsub::ReceivedMessage#acknowledge!</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.pull.each { |msg| msg.acknowledge! }\n</code></pre>\n\n<p>Or, multiple messages can be acknowledged in a single API call:\n(See <a data-custom-type=\"gcloud/pubsub/subscription\" data-method=\"acknowledge-instance\">Gcloud::Pubsub::Subscription#acknowledge</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull\nsub.acknowledge received_messages\n</code></pre>\n\n<h2 id=\"modifying-a-deadline\">Modifying a Deadline</h2>\n\n<p>A message must be acknowledged after it is pulled, or Pub/Sub will mark the\nmessage for redelivery. The message acknowledgement deadline can delayed if\nmore time is needed. This will allow more time to process the message before\nthe message is marked for redelivery. (See\n<a data-custom-type=\"gcloud/pubsub/receivedmessage\" data-method=\"delay!-instance\">Gcloud::Pubsub::ReceivedMessage#delay!</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nif received_message\n  puts received_message.message.data\n  # Delay for 2 minutes\n  received_message.delay! 120\nend\n</code></pre>\n\n<p>The message can also be made available for immediate redelivery:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nif received_message\n  puts received_message.message.data\n  # Mark for redelivery by setting the deadline to now\n  received_message.delay! 0\nend\n</code></pre>\n\n<p>Multiple messages can be delayed or made available for immediate redelivery:\n(See <a data-custom-type=\"gcloud/pubsub/subscription\" data-method=\"delay-instance\">Gcloud::Pubsub::Subscription#delay</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull\nsub.delay 120, received_messages\n</code></pre>\n\n<h2 id=\"listening-for-messages\">Listening for Messages</h2>\n\n<p>Long running workers are easy to create with <code>listen</code>, which runs an\ninfinitely blocking loop to process messages as they are received. (See\n<a data-custom-type=\"gcloud/pubsub/subscription\" data-method=\"listen-instance\">Gcloud::Pubsub::Subscription#listen</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen do |msg|\n  # process msg\nend\n</code></pre>\n\n<p>Messages are retrieved in batches for efficiency. The number of messages\npulled per batch can be limited with the <code>max</code> option:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen max: 20 do |msg|\n  # process msg\nend\n</code></pre>\n\n<p>When processing time and the acknowledgement deadline are a concern,\nmessages can be automatically acknowledged as they are pulled with the\n<code>autoack</code> option:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen autoack: true do |msg|\n  # process msg\nend\n</code></pre>\n\n<h2 id=\"working-across-projects\">Working Across Projects</h2>\n\n<p>All calls to the Pub/Sub service use the same project and credentials\nprovided to the <a data-custom-type=\"gcloud\" data-method=\"pubsub-instance\">Gcloud#pubsub</a> method. However, it is common to reference\ntopics or subscriptions in other projects, which can be achieved by using\nthe <code>project</code> option. The main credentials must have permissions to the\ntopics and subscriptions in other projects.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new # my-project-id\npubsub = gcloud.pubsub\n\n# Get a topic in the current project\nmy_topic = pubsub.topic \"my-topic\"\nmy_topic.name #=&gt; \"projects/my-project-id/topics/my-topic\"\n# Get a topic in another project\nother_topic = pubsub.topic \"other-topic\", project: \"other-project-id\"\nother_topic.name #=&gt; \"projects/other-project-id/topics/other-topic\"\n</code></pre>\n\n<p>It is possible to create a subscription in the current project that pulls\nfrom a topic in another project:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new # my-project-id\npubsub = gcloud.pubsub\n\n# Get a topic in another project\ntopic = pubsub.topic \"other-topic\", project: \"other-project-id\"\n# Create a subscription in the current project that pulls from\n# the topic in another project\nsub = topic.subscribe \"my-sub\"\nsub.name #=&gt; \"projects/my-project-id/subscriptions/my-sub\"\nsub.topic.name #=&gt; \"projects/other-project-id/topics/other-topic\"\n</code></pre>","source":"lib/gcloud/pubsub.rb#L427","resources":[],"examples":[],"methods":[]}