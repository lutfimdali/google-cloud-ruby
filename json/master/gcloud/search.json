{"id":"gcloud/search","name":"Search","title":["Gcloud","Search"],"description":"<h1 id=\"google-cloud-search\">Google Cloud Search</h1>\n\n<p>Google Cloud Search allows an application to quickly perform full-text and\ngeo-spatial searches without having to spin up instances and without the\nhassle of managing and maintaining a search service.</p>\n\n<p>Cloud Search provides a model for indexing documents containing structured\ndata, with documents and indexes saved to a separate persistent store\noptimized for search operations. The API supports full text matching on\nstring fields and allows indexing any number of documents in any number of\nindexes.</p>\n\n<p>The Cloud Search API is an Alpha release, and might be changed in\nbackward-incompatible ways. It is not currently recommended for production\nuse. It is not subject to any SLA or deprecation policy.</p>\n\n<h2 id=\"accessing-the-service\">Accessing the Service</h2>\n\n<p>Currently, the Cloud Search API is available only to white-listed users.\nContact your account manager or a member of the Google Cloud sales team if\nyou are interested in access.</p>\n\n<h2 id=\"authentication\">Authentication</h2>\n\n<p>Authentication is handled by <a data-custom-type=\"gcloud\" data-method=\"search-instance\">Gcloud#search</a>. You can provide the project and\ncredential information to connect to the Cloud Search service, or if you are\nrunning on Google Compute Engine this configuration is taken care of for\nyou. You can read more about the options for connecting in the\n<a href=\"https://googlecloudplatform.github.io/gcloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"managing-indexes\">Managing Indexes</h2>\n\n<p>An Index is a searchable collection of documents that belongs to a Project.</p>\n\n<p>You can list the indexes in your current project:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindexes = search.indexes  # API call\nindexes.each do |index|\n  puts index.index_id\nend\n</code></pre>\n\n<p>And you can use the project to create new indexes:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindex = search.index \"products\", skip_lookup: true\n</code></pre>\n\n<p>A new index is an unsaved value object. Indexes cannot be created,\nupdated, or deleted directly in the service: They are derived from the\ndocuments which are created “within” them. A new index will exist in the\nservice once you save a document that references it.</p>\n\n<h2 id=\"managing-documents\">Managing Documents</h2>\n\n<p>Using an index, create a new, unsaved Document instance, providing\nyour own unique document ID, as shown below, or omitting this argument to\nlet the service assign the ID.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindex = search.index \"products\"\ndocument = index.document \"product-sku-000001\"\nindex.find document # API call\n#=&gt; nil\ndocument.rank #=&gt; nil\n</code></pre>\n\n<p>Add one or more fields to the document. (See <a href=\"#module-Gcloud::Search-label-Adding`document`fields\">Adding document fields</a>, below.)</p>\n\n<pre><code class=\"language-ruby\">document.add \"price\", 24.95\n</code></pre>\n\n<p>When your document is complete, save it:</p>\n\n<pre><code class=\"language-ruby\">index.save document # API call\ndocument.rank # set by the server\n#=&gt; 1443648166\n</code></pre>\n\n<p>You can list the documents in an index:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocuments = index.documents # API call\ndocuments.map &amp;:doc_id #=&gt; [\"product-sku-000001\"]\n</code></pre>\n\n<p>And you can delete documents:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.find \"product-sku-000001\"\n\ndocument.delete  # API call\nindex.find document # API call\n#=&gt; nil\n</code></pre>\n\n<p>To update a document after manipulating its fields or rank, just re-save it:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.find \"product-sku-000001\"\n\ndocument.rank = 12345\ndocument.add \"price\", 9.95 # replace existing number value\nindex.save document # API call\n</code></pre>\n\n<h2 id=\"adding-document-fields\">Adding document fields</h2>\n\n<p>Fields belong to documents and are the data that actually gets searched.\nEach field has a FieldValues collection, which facilitates access to\nFieldValue objects. Each FieldValue object will be saved as one of the\n<a href=\"https://cloud.google.com/search/documents_indexes#document_fields_field_names_and_multi-valued_fields\">Cloud Search types</a>.\nThe type will be inferred from the value when possible, or you can\nexplicitly specify it by passing a symbol with the <code>type</code> option to\n<a data-custom-type=\"gcloud/search/document\" data-method=\"add-instance\">Gcloud::Search::Document#add</a>.</p>\n\n<ul>\n  <li>String (<code>:atom</code>, <code>:html</code>, <code>:text</code>, or <code>:default</code>)</li>\n  <li>Number (<code>:number</code>)</li>\n  <li>Timestamp (<code>:datetime</code>)</li>\n  <li>Geovalue (<code>:geo</code>)</li>\n</ul>\n\n<p>String values can be tokenized using one of three different types of\ntokenization, which can be passed with the <code>type</code> option when the value is\nadded:</p>\n\n<ul>\n  <li>\n    <p><code>:atom</code> means “don’t tokenize this string”, treat it as one\nthing to compare against</p>\n  </li>\n  <li>\n    <p><code>:html</code> means “treat this string as HTML”, not comparing against the\ntags, and treating the rest of the content like <code>:text</code></p>\n  </li>\n  <li>\n    <p><code>:text</code> means “treat this string as normal text” and split words\napart to be compared against</p>\n  </li>\n</ul>\n\n<p>Again, you can add more than one value to a field, and the values may be of\ndifferent types.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindex = search.index \"products\"\ndocument = index.find \"product-sku-000001\"\ndocument.add \"description\", \"The best T-shirt ever.\", type: :text, lang: \"en\"\ndocument.add \"description\", \"&lt;p&gt;The best T-shirt ever.&lt;/p&gt;\", type: :html, lang: \"en\"\ndocument[\"description\"].size #=&gt; 2\n</code></pre>\n\n<h2 id=\"searching\">Searching</h2>\n\n<p>After populating an index with documents, you can request search results\nwith a query:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\n\nresults = index.search \"dark stormy\"\nresults.each do |result|\n  puts result.doc_id\nend\n</code></pre>\n\n<p>By default, Result objects are sorted by document rank. For more information\nsee the <a href=\"https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents#resource_representation.google.cloudsearch.v1.Document.rank\">REST API documentation for Document.rank</a>.</p>\n\n<p>You can specify how to sort results with the <code>order</code> option:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\n\nresults = index.search \"dark stormy\", order: \"published, avg_review desc\"\ndocuments = index.search query # API call\n</code></pre>\n\n<p>You can add computed fields with the <code>expressions</code> option, and specify the\nfields that are returned with the <code>fields</code> option. No document data will be\nreturned if you omit the <code>fields</code> option, only <code>doc_id</code> references to any\nmatched documents.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\nresults = index.search \"cotton T-shirt\",\n                       expressions: { total_price: \"(price + tax)\" },\n                       fields: [\"name\", \"total_price\", \"highlight\"]\n</code></pre>\n\n<p>Just as in documents, Result data is accessible via Fields methods:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\ndocument = index.find \"product-sku-000001\"\nresults = index.search \"cotton T-shirt\"\nvalues = results[0][\"description\"]\n\nvalues[0] #=&gt; \"100% organic cotton ruby gem T-shirt\"\nvalues[0].type #=&gt; :text\nvalues[0].lang #=&gt; \"en\"\nvalues[1] #=&gt; \"&lt;p&gt;100% organic cotton ruby gem T-shirt&lt;/p&gt;\"\nvalues[1].type #=&gt; :html\nvalues[1].lang #=&gt; \"en\"\n</code></pre>","source":"lib/gcloud/search.rb#L315","resources":[],"examples":[],"methods":[]}