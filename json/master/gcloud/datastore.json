{"id":"gcloud/datastore","name":"Datastore","title":["Gcloud","Datastore"],"description":"<h1 id=\"google-cloud-datastore\">Google Cloud Datastore</h1>\n\n<p>Google Cloud Datastore is a fully managed, schemaless database for storing\nnon-relational data. You should feel at home if you are familiar with\nrelational databases, but there are some key differences to be aware of to\nmake the most of using Datastore.</p>\n\n<p>Gcloud’s goal is to provide a API that is familiar and comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"gcloud\" data-method=\"datastore-instance\">Gcloud#datastore</a>. You can provide\nthe project and credential information to connect to the Datastore service,\nor if you are running on Google Compute Engine this configuration is taken\ncare of for you.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\ndataset = gcloud.datastore\nentity = dataset.find \"Task\", \"start\"\nentity[\"completed\"] = true\ndataset.save entity\n</code></pre>\n\n<p>You can learn more about various options for connection on the\n<a href=\"https://googlecloudplatform.github.io/gcloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<p>To learn more about Datastore, read the\n<a href=\"https://cloud.google.com/datastore/docs/concepts/overview\">Google Cloud Datastore Concepts Overview\n</a>.</p>\n\n<h2 id=\"retrieving-records\">Retrieving Records</h2>\n\n<p>Records, called “entities” in Datastore, are retrieved by using a Key.\nThe Key is more than a numeric identifier, it is a complex data structure\nthat can be used to model relationships. The simplest Key has a string\n<tt>kind</tt> value, and either a numeric <tt>id</tt> value, or a string\n<tt>name</tt> value. A single record can be retrieved by calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"find-instance\">Gcloud::Datastore::Dataset#find</a> and passing the parts of the key:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nentity = dataset.find \"Task\", \"start\"\n</code></pre>\n\n<p>Optionally, <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"find-instance\">Gcloud::Datastore::Dataset#find</a> can be given a Key object:</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nkey = dataset.key \"Task\", 12345\nentity = dataset.find key\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"find-instance\">Gcloud::Datastore::Dataset#find</a></p>\n\n<h2 id=\"querying-records\">Querying Records</h2>\n\n<p>Multiple records can be found that match criteria.\n(See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"where-instance\">Gcloud::Datastore::Query#where</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nquery = dataset.query(\"List\").\n  where(\"active\", \"=\", true)\nactive_lists = dataset.run query\n</code></pre>\n\n<p>Records can also be ordered. (See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"order-instance\">Gcloud::Datastore::Query#order</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nquery = dataset.query(\"List\").\n  where(\"active\", \"=\", true).\n  order(\"name\")\nactive_lists = dataset.run query\n</code></pre>\n\n<p>The number of records returned can be specified.\n(See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"limit-instance\">Gcloud::Datastore::Query#limit</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nquery = dataset.query(\"List\").\n  where(\"active\", \"=\", true).\n  order(\"name\").\n  limit(5)\nactive_lists = dataset.run query\n</code></pre>\n\n<p>Records’ Key structures can also be queried.\n(See <a data-custom-type=\"gcloud/datastore/query\" data-method=\"ancestor-instance\">Gcloud::Datastore::Query#ancestor</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nlist = dataset.find \"List\", \"todos\"\nquery = dataset.query(\"Task\").\n  ancestor(list.key)\nitems = dataset.run query\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/query\">Gcloud::Datastore::Query</a> and <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"run-instance\">Gcloud::Datastore::Dataset#run</a></p>\n\n<h2 id=\"paginating-records\">Paginating Records</h2>\n\n<p>All Records may not return at once, requiring multiple calls to Datastore\nto return them all. The returned records will have a <tt>cursor</tt> if\nthere are more available.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nlist = dataset.find \"List\", \"todos\"\nquery = dataset.query(\"Task\").\n  ancestor(list.key)\nall_tasks = []\ntmp_tasks = dataset.run query\nwhile tmp_tasks.any? do\n  tmp_tasks.each do |task|\n    all_tasks &lt;&lt; task\n  end\n  # break loop if no more tasks available\n  break if tmp_tasks.cursor.nil?\n  # set cursor on the query\n  query = query.cursor tmp_tasks.cursor\n  # query for more records\n  tmp_tasks = dataset.run query\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/dataset/lookupresults\">Gcloud::Datastore::Dataset::LookupResults</a> and\n<a data-custom-type=\"gcloud/datastore/dataset/queryresults\">Gcloud::Datastore::Dataset::QueryResults</a></p>\n\n<h2 id=\"creating-records\">Creating Records</h2>\n\n<p>New entities can be created and persisted buy calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"save-instance\">Gcloud::Datastore::Dataset#save</a>. The entity must have a Key to be saved.\nIf the Key is incomplete then it will be completed when saved.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nentity = dataset.entity \"User\" do |e|\n  e[\"name\"] = \"Heidi Henderson\"\nend\nentity.key.id #=&gt; nil\ndataset.save entity\nentity.key.id #=&gt; 123456789\n</code></pre>\n\n<h2 id=\"updating-records\">Updating Records</h2>\n\n<p>Entities hold properties. A property has a name that is a string or symbol,\nand a value that is an object. Most value objects are supported, including\nString, Integer, Date, Time, and even other Entity or Key objects. Changes\nto the Entity’s properties are persisted by calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"save-instance\">Gcloud::Datastore::Dataset#save</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nentity = dataset.find \"User\", \"heidi\"\n# Read the status property\nentity[\"status\"] #=&gt; \"inactive\"\n# Write the status property\nentity[\"status\"] = \"active\"\n# Persist the changes\ndataset.save entity\n</code></pre>\n\n<h2 id=\"deleting-records\">Deleting Records</h2>\n\n<p>Entities can be removed from Datastore by calling\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"delete-instance\">Gcloud::Datastore::Dataset#delete</a> and passing the Entity object or the\nentity’s Key object.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nentity = dataset.find \"User\", \"heidi\"\ndataset.delete entity\n</code></pre>\n\n<h2 id=\"transactions\">Transactions</h2>\n\n<p>Complex logic can be wrapped in a Transaction. All queries and updates\nwithin the <a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"transaction-instance\">Gcloud::Datastore::Dataset#transaction</a> block are run within the\ntransaction scope, and will be automatically committed when the block\ncompletes.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nkey = dataset.key \"User\", \"heidi\"\n\nuser = dataset.entity key do |u|\n  u[\"name\"] = \"Heidi Henderson\"\n  u[\"email\"] = \"heidi@example.net\"\nend\n\ndataset.transaction do |tx|\n  if tx.find(user.key).nil?\n    tx.save user\n  end\nend\n</code></pre>\n\n<p>Alternatively, if no block is given the transaction object is returned\nallowing you to commit or rollback manually.</p>\n\n<pre><code class=\"language-ruby\">require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nkey = dataset.key \"User\", \"heidi\"\n\nuser = dataset.entity key do |u|\n  u[\"name\"] = \"Heidi Henderson\"\n  u[\"email\"] = \"heidi@example.net\"\nend\n\ntx = dataset.transaction\nbegin\n  if tx.find(user.key).nil?\n    tx.save user\n  end\n  tx.commit\nrescue\n  tx.rollback\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"gcloud/datastore/transaction\">Gcloud::Datastore::Transaction</a> and\n<a data-custom-type=\"gcloud/datastore/dataset\" data-method=\"transaction-instance\">Gcloud::Datastore::Dataset#transaction</a></p>","source":"lib/gcloud/datastore.rb#L337","resources":[],"examples":[],"methods":[]}