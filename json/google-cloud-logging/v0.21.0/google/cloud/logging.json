{"id":"google/cloud/logging","name":"Logging","title":["Google","Cloud","Logging"],"description":"<h1 id=\"stackdriver-logging\">Stackdriver Logging</h1>\n\n<p>The Stackdriver Logging service collects and stores logs from applications\nand services on the Google Cloud Platform, giving you fine-grained,\nprogrammatic control over your projects’ logs. You can use the Stackdriver\nLogging API to:</p>\n\n<ul>\n  <li><a data-anchor=\"listing-log-entries\" href=\"#listing-log-entries\">Read and filter log entries</a></li>\n  <li><a data-anchor=\"exporting-log-entries\" href=\"#exporting-log-entries\">Export your log entries</a> to Cloud Storage,\nBigQuery, or Cloud Pub/Sub</li>\n  <li><a data-anchor=\"creating-logs-based-metrics\" href=\"#creating-logs-based-metrics\">Create logs-based metrics</a> for use in\nCloud Monitoring</li>\n  <li><a data-anchor=\"writing-log-entries\" href=\"#writing-log-entries\">Write log entries</a></li>\n</ul>\n\n<p>For general information about Stackdriver Logging, read <a href=\"https://cloud.google.com/logging/docs/\">Stackdriver\nLogging Documentation</a>.</p>\n\n<p>The goal of google-cloud is to provide an API that is comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"google/cloud\" data-method=\"logging-instance\">Google::Cloud#logging</a>. You can\nprovide the project and credential information to connect to the\nStackdriver Logging service, or if you are running on Google Compute\nEngine this configuration is taken care of for you. You can read more\nabout the options for connecting in the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<p>If you just want to write your application’s logs to the Stackdriver\nLogging service, you may find it easiest to use the <a data-anchor=\"creating-a-ruby-logger-implementation\" href=\"#creating-a-ruby-logger-implementation\">Ruby Logger\nimplementation</a> provided by this\nlibrary. Otherwise, read on to learn more about the Logging API.</p>\n\n<h2 id=\"listing-log-entries\">Listing log entries</h2>\n\n<p>Stackdriver Logging gathers log entries from many services, including\nGoogle App Engine and Google Compute Engine. (See the <a href=\"https://cloud.google.com/logging/docs/view/logs_index\">List of Log\nTypes</a>.) In\naddition, you can write your own log entries to the service.</p>\n\n<p><a data-custom-type=\"google/cloud/logging/project\" data-method=\"entries-instance\">Google::Cloud::Logging::Project#entries</a> returns the\n<a data-custom-type=\"google/cloud/logging/entry\">Google::Cloud::Logging::Entry</a> records belonging to your project:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nentries = logging.entries\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}\"\nend\n</code></pre>\n\n<p>You can narrow the results to a single log using an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs\nfilter</a>. A\nlog is a named collection of entries. Logs can be produced by Google Cloud\nPlatform services, by third-party services, or by your applications. For\nexample, the log <code>compute.googleapis.com/activity_log</code> is produced by\nGoogle Compute Engine. Logs are simply referenced by name in google-cloud.\nThere is no <code>Log</code> type in google-cloud or <code>Log</code> resource in the\nStackdriver Logging API.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nentries = logging.entries filter: \"log:syslog\"\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.payload.inspect}\"\nend\n</code></pre>\n\n<p>You can also order the log entries by <code>timestamp</code>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nentries = logging.entries order: \"timestamp desc\"\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}\"\nend\n</code></pre>\n\n<h2 id=\"exporting-log-entries\">Exporting log entries</h2>\n\n<p>Stackdriver Logging lets you export log entries to destinations including\nGoogle Cloud Storage buckets (for long term log storage), Google BigQuery\ndatasets (for log analysis), and Google Pub/Sub (for streaming to other\napplications).</p>\n\n<h3 id=\"creating-sinks\">Creating sinks</h3>\n\n<p>A <a data-custom-type=\"google/cloud/logging/sink\">Google::Cloud::Logging::Sink</a> is an object that lets you to specify a\nset of log entries to export.</p>\n\n<p>In addition to the name of the sink and the export destination,\n<a data-custom-type=\"google/cloud/logging/project\" data-method=\"create_sink-instance\">Google::Cloud::Logging::Project#create_sink</a> accepts an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs\nfilter</a> to\nnarrow the collection.</p>\n\n<p>Before creating the sink, ensure that you have granted\n<code>cloud-logs@google.com</code> permission to write logs to the destination. See\n<a href=\"https://cloud.google.com/logging/docs/export/configure_export#setting_product_name_short_permissions_for_writing_exported_logs\">Permissions for writing exported\nlogs</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.create_bucket \"my-logs-bucket\"\n\n# Grant owner permission to Stackdriver Logging service\nemail = \"cloud-logs@google.com\"\nbucket.acl.add_owner \"group-#{email}\"\n\nrequire \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nsink = logging.create_sink \"my-sink\",\n                           \"storage.googleapis.com/#{bucket.id}\"\n</code></pre>\n\n<p>When you create a sink, only new log entries are exported. Stackdriver\nLogging does not send previously-ingested log entries to the sink’s\ndestination.</p>\n\n<h3 id=\"listing-sinks\">Listing sinks</h3>\n\n<p>You can also list the sinks belonging to your project with\n<a data-custom-type=\"google/cloud/logging/project\" data-method=\"sinks-instance\">Google::Cloud::Logging::Project#sinks</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nsinks = logging.sinks\nsinks.each do |s|\n  puts \"#{s.name}: #{s.filter} -&gt; #{s.destination}\"\nend\n</code></pre>\n\n<h2 id=\"creating-logs-based-metrics\">Creating logs-based metrics</h2>\n\n<p>You can use log entries in your project as the basis for <a href=\"https://cloud.google.com/monitoring/docs\">Google Cloud\nMonitoring</a> metrics. These\nmetrics can then be used to produce Cloud Monitoring reports and alerts.</p>\n\n<h3 id=\"creating-metrics\">Creating metrics</h3>\n\n<p>A metric is a measured value that can be used to assess a system. Use\n<a data-custom-type=\"google/cloud/logging/project\" data-method=\"create_metric-instance\">Google::Cloud::Logging::Project#create_metric</a> to configure a\n<a data-custom-type=\"google/cloud/logging/metric\">Google::Cloud::Logging::Metric</a> based on a collection of log entries\nmatching an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs\nfilter</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nmetric = logging.create_metric \"errors\", \"severity&gt;=ERROR\"\n</code></pre>\n\n<h3 id=\"listing-metrics\">Listing metrics</h3>\n\n<p>You can also list the metrics belonging to your project with\n<a data-custom-type=\"google/cloud/logging/project\" data-method=\"metrics-instance\">Google::Cloud::Logging::Project#metrics</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nmetrics = logging.metrics\nmetrics.each do |m|\n  puts \"#{m.name}: #{m.filter}\"\nend\n</code></pre>\n\n<h2 id=\"writing-log-entries\">Writing log entries</h2>\n\n<p>An <a data-custom-type=\"google/cloud/logging/entry\">Google::Cloud::Logging::Entry</a> is composed of metadata and a payload.\nThe payload is traditionally a message string, but in Stackdriver Logging\nit can also be a JSON or protocol buffer object. A single log can have\nentries with different payload types. In addition to the payload, your\nargument(s) to <a data-custom-type=\"google/cloud/logging/project\" data-method=\"write_entries-instance\">Google::Cloud::Logging::Project#write_entries</a> must also\ncontain a log name and a resource.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nentry = logging.entry\nentry.payload = \"Job started.\"\nentry.log_name = \"my_app_log\"\nentry.resource.type = \"gae_app\"\nentry.resource.labels[:module_id] = \"1\"\nentry.resource.labels[:version_id] = \"20150925t173233\"\n\nlogging.write_entries entry\n</code></pre>\n\n<p>If you write a collection of log entries, you can provide the log name,\nresource, and/or labels hash to be used for all of the entries, and omit\nthese values from the individual entries.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nentry1 = logging.entry\nentry1.payload = \"Job started.\"\nentry2 = logging.entry\nentry2.payload = \"Job completed.\"\nlabels = { job_size: \"large\", job_code: \"red\" }\n\nresource = logging.resource \"gae_app\",\n                            \"module_id\" =&gt; \"1\",\n                            \"version_id\" =&gt; \"20150925t173233\"\n\nlogging.write_entries [entry1, entry2],\n                      log_name: \"my_app_log\",\n                      resource: resource,\n                      labels: labels\n</code></pre>\n\n<p>Normally, writing log entries is done synchronously; the call to\n<a data-custom-type=\"google/cloud/logging/project\" data-method=\"write_entries-instance\">Google::Cloud::Logging::Project#write_entries</a> will block until it has\neither completed transmitting the data or encountered an error. To “fire\nand forget” without blocking, use <a data-custom-type=\"google/cloud/logging/asyncwriter\">Google::Cloud::Logging::AsyncWriter</a>;\nit spins up a background thread that writes log entries in batches. Calls\nto <a data-custom-type=\"google/cloud/logging/asyncwriter\" data-method=\"write_entries-instance\">Google::Cloud::Logging::AsyncWriter#write_entries</a> simply add entries\nto its work queue and return immediately.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nasync = logging.async_writer\n\nentry1 = logging.entry\nentry1.payload = \"Job started.\"\nentry2 = logging.entry\nentry2.payload = \"Job completed.\"\nlabels = { job_size: \"large\", job_code: \"red\" }\n\nresource = logging.resource \"gae_app\",\n                            \"module_id\" =&gt; \"1\",\n                            \"version_id\" =&gt; \"20150925t173233\"\n\nasync.write_entries [entry1, entry2],\n                    log_name: \"my_app_log\",\n                    resource: resource,\n                    labels: labels\n</code></pre>\n\n<h3 id=\"creating-a-ruby-logger-implementation\">Creating a Ruby Logger implementation</h3>\n\n<p>If your environment requires a logger instance that is API-compatible with\nRuby’s standard library\n<a href=\"http://ruby-doc.org/stdlib/libdoc/logger/rdoc\">Logger</a>, you can use\n<a data-custom-type=\"google/cloud/logging/project\" data-method=\"logger-instance\">Google::Cloud::Logging::Project#logger</a> to create one.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nresource = logging.resource \"gae_app\",\n                            module_id: \"1\",\n                            version_id: \"20150925t173233\"\n\nlogger = logging.logger \"my_app_log\", resource, env: :production\nlogger.info \"Job started.\"\n</code></pre>\n\n<p>By default, the logger instance writes log entries asynchronously in a\nbackground thread using an <a data-custom-type=\"google/cloud/logging/asyncwriter\">Google::Cloud::Logging::AsyncWriter</a>. If you\nwant to customize or disable asynchronous writing, you may call the\nLogger constructor directly.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nresource = logging.resource \"gae_app\",\n                            module_id: \"1\",\n                            version_id: \"20150925t173233\"\n\nlogger = Google::Cloud::Logging::Logger.new logging,\n                                            \"my_app_log\",\n                                            resource,\n                                            {env: :production}\nlogger.info \"Log entry written synchronously.\"\n</code></pre>\n\n<h2 id=\"configuring-timeout\">Configuring timeout</h2>\n\n<p>You can configure the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new timeout: 120\n</code></pre>","source":"google-cloud-logging/lib/google/cloud/logging.rb#L329","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Logging.new"],"description":"<p>Creates a new object for connecting to the Stackdriver Logging service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-logging/lib/google/cloud/logging.rb#L366","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nentries = logging.entries\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}\"\nend"}],"params":[{"name":"project","types":["String"],"description":"Project identifier for the Stackdriver Logging\nservice.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud. If\nfile path the file must be readable.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/logging.admin</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/logging/project\">Google::Cloud::Logging::Project</a>"],"description":""}]}]}