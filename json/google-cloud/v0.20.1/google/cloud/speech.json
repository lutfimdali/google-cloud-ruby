{"id":"google/cloud/speech","name":"Speech","title":["Google","Cloud","Speech"],"description":"<h1 id=\"google-cloud-speech\">Google Cloud Speech</h1>\n\n<p>Google Cloud Speech API enables developers to convert audio to text by\napplying powerful neural network models in an easy to use API. The API\nrecognizes over 80 languages and variants, to support your global user\nbase. You can transcribe the text of users dictating to an applicationâ€™s\nmicrophone, enable command-and-control through voice, or transcribe audio\nfiles, among many other use cases. Recognize audio uploaded in the\nrequest, and integrate with your audio storage on Google Cloud Storage, by\nusing the same technology Google uses to power its own products.</p>\n\n<p>For more information about Google Cloud Speech API, read the <a href=\"https://cloud.google.com/speech/docs/\">Google Cloud\nSpeech API Documentation</a>.</p>\n\n<p>The goal of google-cloud is to provide an API that is comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"google/cloud\" data-method=\"speech-instance\">Google::Cloud#speech</a>. You can\nprovide the project and credential information to connect to the Cloud\nSpeech service, or if you are running on Google Compute Engine this\nconfiguration is taken care of for you. You can read more about the\noptions for connecting in the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"creating-audio-sources\">Creating audio sources</h2>\n\n<p>You can create an audio object that holds a reference to any one of\nseveral types of audio data source, along with metadata such as the audio\nencoding type.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/speech/project\" data-method=\"audio-instance\">Speech::Project#audio</a> to create audio sources for the Cloud Speech\nAPI. You can provide a file path:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud\"\n\ngcloud = Google::Cloud.new\nspeech = gcloud.speech\n\naudio = speech.audio \"path/to/audio.raw\",\n                     encoding: :raw, sample_rate: 16000\n</code></pre>\n\n<p>Or, you can initialize the audio instance with a Google Cloud Storage URI:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud\"\n\ngcloud = Google::Cloud.new\nspeech = gcloud.speech\n\naudio = speech.audio \"gs://bucket-name/path/to/audio.raw\",\n                     encoding: :raw, sample_rate: 16000\n</code></pre>\n\n<p>Or, with a Google Cloud Storage File object:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud\"\n\ngcloud = Google::Cloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"bucket-name\"\nfile = bucket.file \"path/to/audio.raw\"\n\nspeech = gcloud.speech\n\naudio = speech.audio file, encoding: :raw, sample_rate: 16000\n</code></pre>\n\n<h2 id=\"recognizing-speech\">Recognizing speech</h2>\n\n<p>The instance methods on <a data-custom-type=\"google/cloud/speech/audio\">Speech::Audio</a> can be used to invoke both\nsynchronous and asynchronous versions of the Cloud Speech API speech\nrecognition operation.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/speech/audio\" data-method=\"recognize-instance\">Speech::Audio#recognize</a> for synchronous speech recognition that\nreturns Result objects only after all audio has been processed. This\nmethod is limited to audio data of 1 minute or less in duration, and will\ntake roughly the same amount of time to process as the duration of the\nsupplied audio data.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud\"\n\ngcloud = Google::Cloud.new\nspeech = gcloud.speech\n\naudio = speech.audio \"path/to/audio.raw\",\n                     encoding: :raw, sample_rate: 16000\nresults = audio.recognize\n\nresult = results.first\nresult.transcript #=&gt; \"how old is the Brooklyn Bridge\"\nresult.confidence #=&gt; 88.15\n</code></pre>\n\n<p>Use <a data-custom-type=\"google/cloud/speech/audio\" data-method=\"recognize_job-instance\">Speech::Audio#recognize_job</a> for asynchronous speech recognition,\nin which a Job is returned immediately after the audio data has\nbeen sent. The job can be refreshed to retrieve Result objects\nonce the audio data has been processed.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud\"\n\ngcloud = Google::Cloud.new\nspeech = gcloud.speech\n\naudio = speech.audio \"path/to/audio.raw\",\n                     encoding: :raw, sample_rate: 16000\njob = audio.recognize_job\n\njob.done? #=&gt; false\njob.reload!\njob.done? #=&gt; true\nresults = job.results\n\nresult = results.first\nresult.transcript #=&gt; \"how old is the Brooklyn Bridge\"\nresult.confidence #=&gt; 88.15\n</code></pre>","source":"google-cloud-speech/lib/google/cloud/speech.rb#L143","resources":[],"examples":[],"methods":[]}