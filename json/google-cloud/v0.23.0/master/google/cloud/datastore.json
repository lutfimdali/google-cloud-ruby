{"id":"google/cloud/datastore","name":"Datastore","title":["Google","Cloud","Datastore"],"description":"<h1 id=\"google-cloud-datastore\">Google Cloud Datastore</h1>\n\n<p>Google Cloud Datastore is a fully managed, schemaless database for storing\nnon-relational data. You should feel at home if you are familiar with\nrelational databases, but there are some key differences to be aware of to\nmake the most of using Datastore.</p>\n\n<p>The goal of google-cloud is to provide a API that is comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"google/cloud\" data-method=\"datastore-instance\">Google::Cloud#datastore</a>. You can\nprovide the project and credential information to connect to the Datastore\nservice, or if you are running on Google Compute Engine this configuration\nis taken care of for you.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new(\n  project: \"my-todo-project\",\n  keyfile: \"/path/to/keyfile.json\"\n)\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask[\"priority\"] = 5\ndatastore.save task\n</code></pre>\n\n<p>You can learn more about various options for connection on the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<p>To learn more about Datastore, read the\n<a href=\"https://cloud.google.com/datastore/docs/concepts/overview\">Google Cloud Datastore Concepts Overview\n</a>.</p>\n\n<h2 id=\"retrieving-records\">Retrieving records</h2>\n\n<p>Records, called “entities” in Datastore, are retrieved by using a key.\nThe key is more than a numeric identifier, it is a complex data structure\nthat can be used to model relationships. The simplest key has a string\n<tt>kind</tt> value, and either a numeric <tt>id</tt> value, or a string\n<tt>name</tt> value. A single record can be retrieved by calling\n<a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"find-instance\">Google::Cloud::Datastore::Dataset#find</a> and passing the parts of the key:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n</code></pre>\n\n<p>Optionally, <a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"find-instance\">Google::Cloud::Datastore::Dataset#find</a> can be given a key\nobject:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask_key = datastore.key \"Task\", 123456\ntask = datastore.find task_key\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"find-instance\">Google::Cloud::Datastore::Dataset#find</a></p>\n\n<h2 id=\"querying-records\">Querying records</h2>\n\n<p>Multiple records can be found that match criteria.\n(See <a data-custom-type=\"google/cloud/datastore/query\" data-method=\"where-instance\">Google::Cloud::Datastore::Query#where</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nquery = datastore.query(\"Task\").\n  where(\"done\", \"=\", false)\n\ntasks = datastore.run query\n</code></pre>\n\n<p>Records can also be ordered. (See <a data-custom-type=\"google/cloud/datastore/query\" data-method=\"order-instance\">Google::Cloud::Datastore::Query#order</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nquery = datastore.query(\"Task\").\n  order(\"created\")\n\ntasks = datastore.run query\n</code></pre>\n\n<p>The number of records returned can be specified.\n(See <a data-custom-type=\"google/cloud/datastore/query\" data-method=\"limit-instance\">Google::Cloud::Datastore::Query#limit</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nquery = datastore.query(\"Task\").\n  limit(5)\n\ntasks = datastore.run query\n</code></pre>\n\n<p>Records’ key structures can also be queried.\n(See <a data-custom-type=\"google/cloud/datastore/query\" data-method=\"ancestor-instance\">Google::Cloud::Datastore::Query#ancestor</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask_list_key = datastore.key \"TaskList\", \"default\"\n\nquery = datastore.query(\"Task\").\n  ancestor(task_list_key)\n\ntasks = datastore.run query\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/datastore/query\">Google::Cloud::Datastore::Query</a> and\n<a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"run-instance\">Google::Cloud::Datastore::Dataset#run</a></p>\n\n<h3 id=\"paginating-records\">Paginating records</h3>\n\n<p>All records may not return at once, but multiple calls can be made to\nDatastore to return them all.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nquery = datastore.query(\"Task\")\ntasks = datastore.run query\ntasks.all do |task|\n  puts t[\"description\"]\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/datastore/dataset/lookupresults\">Google::Cloud::Datastore::Dataset::LookupResults</a> and\n<a data-custom-type=\"google/cloud/datastore/dataset/queryresults\">Google::Cloud::Datastore::Dataset::QueryResults</a></p>\n\n<h2 id=\"creating-records\">Creating records</h2>\n\n<p>New entities can be created and persisted buy calling\n<a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"save-instance\">Google::Cloud::Datastore::Dataset#save</a>. The entity must have a key to be\nsaved. If the key is incomplete then it will be completed when saved.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\ntask.key.id #=&gt; nil\ndatastore.save task\ntask.key.id #=&gt; 123456\n</code></pre>\n\n<p>Multiple new entities may be created in a batch.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask1 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\n\ntask2 = datastore.entity \"Task\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Integrate Cloud Datastore\"\nend\n\ntasks = datastore.save(task1, task2)\ntask_key1 = tasks[0].key\ntask_key2 = tasks[1].key\n</code></pre>\n\n<p>Entities in Datastore form a hierarchically structured space similar to\nthe directory structure of a file system. When you create an entity, you\ncan optionally designate another entity as its parent; the new entity is a\nchild of the parent entity.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask_key = datastore.key \"Task\", \"sampleTask\"\ntask_key.parent = datastore.key \"TaskList\", \"default\"\n\ntask = datastore.entity task_key do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Integrate Cloud Datastore\"\nend\n</code></pre>\n\n<h2 id=\"setting-properties\">Setting properties</h2>\n\n<p>Entities hold properties. A property has a name that is a string or\nsymbol, and a value that is an object. Most value objects are supported,\nincluding String, Integer, Date, Time, and even other entity or key\nobjects. Changes to the entity’s properties are persisted by calling\n<a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"save-instance\">Google::Cloud::Datastore::Dataset#save</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n# Read the priority property\ntask[\"priority\"] #=&gt; 4\n# Write the priority property\ntask[\"priority\"] = 5\n# Persist the changes\ndatastore.save task\n</code></pre>\n\n<p>Array properties can be used to store more than one value.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.entity \"Task\", \"sampleTask\" do |t|\n  t[\"tags\"] = [\"fun\", \"programming\"]\n  t[\"collaborators\"] = [\"alice\", \"bob\"]\nend\n</code></pre>\n\n<h2 id=\"deleting-records\">Deleting records</h2>\n\n<p>Entities can be removed from Datastore by calling\n<a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"delete-instance\">Google::Cloud::Datastore::Dataset#delete</a> and passing the entity object\nor the entity’s key object.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\ndatastore.delete task\n</code></pre>\n\n<p>Multiple entities may be deleted in a batch.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask_key1 = datastore.key \"Task\", \"sampleTask1\"\ntask_key2 = datastore.key \"Task\", \"sampleTask2\"\ndatastore.delete task_key1, task_key2\n</code></pre>\n\n<h2 id=\"transactions\">Transactions</h2>\n\n<p>Complex logic can be wrapped in a Transaction. All queries and updates\nwithin the <a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"transaction-instance\">Google::Cloud::Datastore::Dataset#transaction</a> block are run\nwithin the transaction scope, and will be automatically committed when the\nblock completes.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask_key = datastore.key \"Task\", \"sampleTask\"\n\ndatastore.transaction do |tx|\n  if tx.find(task_key).nil?\n    task = datastore.entity task_key do |t|\n      t[\"type\"] = \"Personal\"\n      t[\"done\"] = false\n      t[\"priority\"] = 4\n      t[\"description\"] = \"Learn Cloud Datastore\"\n    end\n    tx.save task\n  end\nend\n</code></pre>\n\n<p>Alternatively, if no block is given the transaction object is returned\nallowing you to commit or rollback manually.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask_key = datastore.key \"Task\", \"sampleTask\"\n\ntx = datastore.transaction\nbegin\n  if tx.find(task_key).nil?\n    task = datastore.entity task_key do |t|\n      t[\"type\"] = \"Personal\"\n      t[\"done\"] = false\n      t[\"priority\"] = 4\n      t[\"description\"] = \"Learn Cloud Datastore\"\n    end\n    tx.save task\n  end\n  tx.commit\nrescue\n  tx.rollback\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/datastore/transaction\">Google::Cloud::Datastore::Transaction</a> and\n<a data-custom-type=\"google/cloud/datastore/dataset\" data-method=\"transaction-instance\">Google::Cloud::Datastore::Dataset#transaction</a></p>\n\n<h2 id=\"querying-metadata\">Querying metadata</h2>\n\n<p>Datastore provides programmatic access to some of its metadata to support\nmeta-programming, implementing backend administrative functions, simplify\nconsistent caching, and similar purposes. The metadata available includes\ninformation about the entity groups, namespaces, entity kinds, and\nproperties your application uses, as well as the property representations\nfor each property.</p>\n\n<p>The special entity kind <code>__namespace__</code> can be used to find all the\nnamespaces used in your application entities.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nquery = datastore.query(\"__namespace__\").\n  select(\"__key__\").\n  where(\"__key__\", \"&gt;=\", datastore.key(\"__namespace__\", \"g\")).\n  where(\"__key__\", \"&lt;\", datastore.key(\"__namespace__\", \"h\"))\n\nnamespaces = datastore.run(query).map do |entity|\n  entity.key.name\nend\n</code></pre>\n\n<p>The special entity kind <code>__kind__</code> can be used to return all the\nkinds used in your application.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nquery = datastore.query(\"__kind__\").\n  select(\"__key__\")\n\nkinds = datastore.run(query).map do |entity|\n  entity.key.name\nend\n</code></pre>\n\n<p>Property queries return entities of kind <code>__property__</code> denoting the\nindexed properties associated with an entity kind. (Unindexed properties\nare not included.)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nquery = datastore.query(\"__property__\").\n  select(\"__key__\")\n\nentities = datastore.run(query)\nproperties_by_kind = entities.each_with_object({}) do |entity, memo|\n  kind = entity.key.parent.name\n  prop = entity.key.name\n  memo[kind] ||= []\n  memo[kind] &lt;&lt; prop\nend\n</code></pre>\n\n<p>Property queries support ancestor filtering on a <code>__kind__</code> or\n<code>__property__</code> key, to limit the query results to a single kind or\nproperty. The <code>property_representation</code> property in the entity\nrepresenting property <code>p</code> of kind <code>k</code> is an array containing all\nrepresentations of <code>p</code>’s value in any entity of kind <code>k</code>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nancestor_key = datastore.key \"__kind__\", \"Task\"\nquery = datastore.query(\"__property__\").\n  ancestor(ancestor_key)\n\nentities = datastore.run(query)\nrepresentations = entities.each_with_object({}) do |entity, memo|\n  property_name = entity.key.name\n  property_types = entity[\"property_representation\"]\n  memo[property_name] = property_types\nend\n</code></pre>\n\n<p>Property queries can also be filtered with a range over the\npseudo-property <code>__key__</code>, where the keys denote either <code>__kind__</code> or\n<code>__property__</code> entities.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nstart_key = datastore.key \"__property__\", \"priority\"\nstart_key.parent = datastore.key \"__kind__\", \"Task\"\nquery = datastore.query(\"__property__\").\n  select(\"__key__\").\n  where(\"__key__\", \"&gt;=\", start_key)\n\nentities = datastore.run(query)\nproperties_by_kind = entities.each_with_object({}) do |entity, memo|\n  kind = entity.key.parent.name\n  prop = entity.key.name\n  memo[kind] ||= []\n  memo[kind] &lt;&lt; prop\nend\n</code></pre>\n\n<h2 id=\"configuring-timeout\">Configuring timeout</h2>\n\n<p>You can configure the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new timeout: 120\n</code></pre>\n\n<h2 id=\"the-cloud-datastore-emulator\">The Cloud Datastore Emulator</h2>\n\n<p>As of this release, the Cloud Datastore emulator that is part of the\ngcloud SDK is no longer compatible with google-cloud. This is because the\ngcloud SDK’s Cloud Datastore emulator does not yet support gRPC as a\ntransport layer.</p>\n\n<p>A gRPC-compatible emulator is available until the gcloud SDK Cloud\nDatastore emulator supports gRPC. To use it you must <a href=\"https://storage.googleapis.com/gcd/tools/cloud-datastore-emulator-1.1.1.zip\">download the gRPC\nemulator</a>\nand use the <code>cloud_datastore_emulator</code> script.</p>\n\n<p>When you run the Cloud Datastore emulator you will see a message similar\nto the following printed:</p>\n\n<pre><code>If you are using a library that supports the DATASTORE_EMULATOR_HOST\nenvironment variable, run:\n\nexport DATASTORE_EMULATOR_HOST=localhost:8978\n</code></pre>\n\n<p>Now you can connect to the emulator using the <code>DATASTORE_EMULATOR_HOST</code>\nenvironment variable:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/datastore\"\n\n# Make Datastore use the emulator\nENV[\"DATASTORE_EMULATOR_HOST\"] = \"localhost:8978\"\n\ndatastore = Google::Cloud::Datastore.new project: \"emulator-project-id\"\n\ntask = datastore.entity \"Task\", \"emulatorTask\" do |t|\n  t[\"type\"] = \"Testing\"\n  t[\"done\"] = false\n  t[\"priority\"] = 5\n  t[\"description\"] = \"Use Datastore Emulator\"\nend\n\ndatastore.save task\n</code></pre>","source":"google-cloud-datastore/lib/google/cloud/datastore.rb#L524","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Datastore.new"],"description":"<p>Creates a new object for connecting to the Datastore service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore.rb#L568","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new(\n  project: \"my-todo-project\",\n  keyfile: \"/path/to/keyfile.json\"\n)\n\ntask = datastore.entity \"Task\", \"sampleTask\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend\n\ndatastore.save task"}],"params":[{"name":"project","types":["String"],"description":"Dataset identifier for the Datastore you are\nconnecting to.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud. If\nfile path the file must be readable.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/datastore</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. See Google::Gax::CallSettings. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/datastore/dataset\">Google::Cloud::Datastore::Dataset</a>"],"description":""}]}]}