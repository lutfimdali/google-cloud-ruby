{"id":"google/cloud/datastore/entity","name":"Entity","title":["Google","Cloud","Datastore","Entity"],"description":"<h1 id=\"entity\">Entity</h1>\n\n<p>Entity represents a Datastore record.\nEvery Entity has a <a data-custom-type=\"google/cloud/datastore/key\">Key</a>, and a list of properties.</p>\n\n<p>Entities in Datastore form a hierarchically structured space similar to\nthe directory structure of a file system. When you create an entity, you\ncan optionally designate another entity as its parent; the new entity is\na child of the parent entity.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L66","resources":[{"title":"Entities,\nProperties, and Keys","link":"https://cloud.google.com/datastore/docs/concepts/entities"}],"examples":[{"caption":"<p>Create a new entity using a block:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.entity \"Task\", \"sampleTask\" do |t|\n  t[\"type\"] = \"Personal\"\n  t[\"created\"] = Time.now\n  t[\"done\"] = false\n  t[\"priority\"] = 4\n  t[\"percent_complete\"] = 10.0\n  t[\"description\"] = \"Learn Cloud Datastore\"\nend"},{"caption":"<p>Create a new entity belonging to an existing parent entity:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask_key = datastore.key \"Task\", \"sampleTask\"\ntask_key.parent = datastore.key \"TaskList\", \"default\"\n\ntask = Google::Cloud::Datastore::Entity.new\ntask.key = task_key\n\ntask[\"type\"] = \"Personal\"\ntask[\"done\"] = false\ntask[\"priority\"] = 4\ntask[\"description\"] = \"Learn Cloud Datastore\""}],"methods":[{"id":"key-instance","type":"instance","name":"key","title":["Google","Cloud","Datastore","Entity#key"],"description":"<p>The Key that identifies the entity.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L69","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"initialize-constructor","type":"constructor","name":"initialize","title":["Google","Cloud","Datastore","Entity#initialize"],"description":"<p>Create a new Entity object.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L73","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/datastore/entity\">Entity</a>"],"description":"a new instance of Entity"}]},{"id":"[]-instance","type":"instance","name":"[]","title":["Google","Cloud","Datastore","Entity#[]"],"description":"<p>Retrieve a property value by providing the name.</p>\n\n<p>Property values are converted from the Datastore value type\nautomatically. Blob properties are returned as StringIO objects.\nLocation properties are returned as a Hash with <code>:longitude</code> and\n<code>:latitude</code> keys.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L131","resources":[],"examples":[{"caption":"<p>Properties can be retrieved with a string name:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask[\"description\"] #=> \"Learn Cloud Datastore\""},{"caption":"<p>Or with a symbol name:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask[:description] #=> \"Learn Cloud Datastore\""},{"caption":"<p>Getting a blob value returns a StringIO object:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nuser = datastore.find \"User\", \"alice\"\nuser[\"avatar\"].class #=> StringIO"},{"caption":"<p>Getting a geo point value returns a Hash:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nuser = datastore.find \"User\", \"alice\"\nuser[\"location\"].keys #=> [:latitude, :longitude]"},{"caption":"<p>Getting a blob value returns a StringIO object:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nuser = datastore.find \"User\", \"alice\"\nuser[\"avatar\"].class #=> StringIO"}],"params":[{"name":"prop_name","types":["String","Symbol"],"description":"The name of the property.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Object","nil"],"description":"Returns <code>nil</code> if the property doesn’t exist"}]},{"id":"[]=-instance","type":"instance","name":"[]=","title":["Google","Cloud","Datastore","Entity#[]="],"description":"<p>Set a property value by name.</p>\n\n<p>Property values are converted to use the proper Datastore value type\nautomatically. Use an IO-compatible object (File, StringIO, Tempfile)\nto indicate the property value should be stored as a Datastore <code>blob</code>.\nIO-compatible objects are converted to StringIO objects when they are\nset. Use a Hash with <code>:longitude</code> and <code>:latitude</code> keys to indicate the\nproperty value should be stored as a Geo Point/LatLng.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L192","resources":[],"examples":[{"caption":"<p>Properties can be set with a string name:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask[\"description\"] = \"Learn Cloud Datastore\"\ntask[\"tags\"] = [\"fun\", \"programming\"]"},{"caption":"<p>Or with a symbol name:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask[:description] = \"Learn Cloud Datastore\"\ntask[:tags] = [\"fun\", \"programming\"]"},{"caption":"<p>Setting a blob value using an IO:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nuser = datastore.find \"User\", \"alice\"\nuser[\"avatar\"] = File.open \"/avatars/alice.png\"\nuser[\"avatar\"].class #=> StringIO"},{"caption":"<p>Setting a geo point value using a Hash:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nuser = datastore.find \"User\", \"alice\"\nuser[\"location\"] = { longitude: -122.0862462, latitude: 37.4220041 }"},{"caption":"<p>Setting a blob value using an IO:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nuser = datastore.find \"User\", \"alice\"\nuser[\"avatar\"] = File.open \"/avatars/alice.png\"\nuser[\"avatar\"].class #=> StringIO"}],"params":[{"name":"prop_name","types":["String","Symbol"],"description":"The name of the property.","optional":false,"nullable":false},{"name":"prop_value","types":["Object"],"description":"The value of the property.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"properties-instance","type":"instance","name":"properties","title":["Google","Cloud","Datastore","Entity#properties"],"description":"<p>Retrieve properties in a hash-like structure.\nProperties can be accessed or set by string or symbol.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L246","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n\ntask.properties[:description] = \"Learn Cloud Datastore\"\ntask.properties[\"description\"] #=> \"Learn Cloud Datastore\"\n\ntask.properties.each do |name, value|\n  puts \"property #{name} has a value of #{value}\"\nend"},{"caption":"<p>A property’s existence can be determined by calling <code>exist?</code>:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n\ntask.properties.exist? :description #=> true\ntask.properties.exist? \"description\" #=> true\ntask.properties.exist? :expiration #=> false"},{"caption":"<p>A property can be removed from the entity:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n\ntask.properties.delete :description\ndatastore.update task"},{"caption":"<p>The properties can be converted to a hash:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n\nprop_hash = task.properties.to_h"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/datastore/properties\">Google::Cloud::Datastore::Properties</a>"],"description":""}]},{"id":"key=-instance","type":"instance","name":"key=","title":["Google","Cloud","Datastore","Entity#key="],"description":"<p>Sets the <a data-custom-type=\"google/cloud/datastore/key\">Google::Cloud::Datastore::Key</a> that identifies the entity.</p>\n\n<p>Once the entity is saved, the key is frozen and immutable. Trying to\nset a key when immutable will raise a <code>RuntimeError</code>.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L274","resources":[],"examples":[{"caption":"<p>The key can be set before the entity is saved:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = Google::Cloud::Datastore::Entity.new\ntask.key = datastore.key \"Task\"\ndatastore.save task"},{"caption":"<p>Once the entity is saved, the key is frozen and immutable:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask.persisted? #=> true\ntask.key = datastore.key \"Task\" #=> raise RuntimeError\ntask.key.frozen? #=> true\ntask.key.id = 9876543221 #=> raise RuntimeError"}],"params":[],"exceptions":[],"returns":[]},{"id":"persisted?-instance","type":"instance","name":"persisted?","title":["Google","Cloud","Datastore","Entity#persisted?"],"description":"<p>Indicates if the record is persisted. Default is false.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L293","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = Google::Cloud::Datastore::Entity.new\ntask.persisted? #=> false\n\ntask = datastore.find \"Task\", \"sampleTask\"\ntask.persisted? #=> true"}],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":""}]},{"id":"exclude_from_indexes?-instance","type":"instance","name":"exclude_from_indexes?","title":["Google","Cloud","Datastore","Entity#exclude_from_indexes?"],"description":"<p>Indicates if a property is flagged to be excluded from the Datastore\nindexes. The default value is <code>false</code>. This is another way of saying\nthat values are indexed by default.</p>\n\n<p>If the property is multi-valued, each value in the list can be managed\nseparately for exclusion from indexing. Calling this method for a\nmulti-valued property will return an array that contains the\n<code>excluded</code> boolean value for each corresponding value in the property.\nFor example, if a multi-valued property contains <code>[\"a\", \"b\"]</code>, and\nonly the value <code>\"b\"</code> is indexed (meaning that <code>\"a\"</code>’ is excluded), the\nreturn value for this method will be <code>[true, false]</code>.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L335","resources":[{"title":"Unindexed properties","link":"https://cloud.google.com/datastore/docs/concepts/indexes#Datastore_Unindexed_properties"}],"examples":[{"caption":"<p>Single property values will return a single flag setting:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n\ntask[\"priority\"] = 4\ntask.exclude_from_indexes? \"priority\" #=> false"},{"caption":"<p>A multi-valued property will return array of flag settings:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\ntask = datastore.find \"Task\", \"sampleTask\"\n\ntask[\"tags\"] = [\"fun\", \"programming\"]\ntask.exclude_from_indexes! \"tags\", [true, false]\n\ntask.exclude_from_indexes? \"tags\" #=> [true, false]"}],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":""}]},{"id":"exclude_from_indexes!-instance","type":"instance","name":"exclude_from_indexes!","title":["Google","Cloud","Datastore","Entity#exclude_from_indexes!"],"description":"<p>Sets whether a property should be excluded from the Datastore indexes.\nSetting <code>true</code> will exclude the property from the indexes. Setting\n<code>false</code> will include the property on any applicable indexes. The\ndefault value is <code>false</code>. This is another way of saying that values\nare indexed by default.</p>\n\n<p>If the property is multi-valued, each value in the list can be managed\nseparately for exclusion from indexing. When you call this method for\na multi-valued property, you can pass either a single boolean argument\nto be applied to all of the values, or an array that contains the\nboolean argument for each corresponding value in the property. For\nexample, if a multi-valued property contains <code>[\"a\", \"b\"]</code>, and only\nthe value <code>\"b\"</code> should be indexed (meaning that <code>\"a\"</code>’ should be\nexcluded), you should pass the array: <code>[true, false]</code>.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L410","resources":[{"title":"Unindexed properties","link":"https://cloud.google.com/datastore/docs/concepts/indexes#Datastore_Unindexed_properties"}],"examples":[{"caption":"","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nentity = datastore.find \"Task\", \"sampleTask\"\n\nentity[\"priority\"] = 4\nentity.exclude_from_indexes! \"priority\", true"},{"caption":"<p>Multi-valued properties can be given multiple exclude flags:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nentity = datastore.find \"Task\", \"sampleTask\"\n\nentity[\"tags\"] = [\"fun\", \"programming\"]\nentity.exclude_from_indexes! \"tags\", [true, false]"},{"caption":"<p>Or, a single flag can be applied to all values in a property:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nentity = datastore.find \"Task\", \"sampleTask\"\n\nentity[\"tags\"] = [\"fun\", \"programming\"]\nentity.exclude_from_indexes! \"tags\", true"},{"caption":"<p>Flags can also be set with a block:</p>","code":"require \"google/cloud/datastore\"\n\ndatastore = Google::Cloud::Datastore.new\n\nentity = datastore.find \"Task\", \"sampleTask\"\n\nentity[\"priority\"] = 4\nentity.exclude_from_indexes! \"priority\" do |priority|\n  priority > 4\nend"}],"params":[{"name":"name","types":["String"],"description":"the property name","optional":false,"nullable":false},{"name":"flag","types":["Boolean","Array<Boolean>","nil"],"description":"whether the value or values\nshould be excluded from indexing","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"a block yielding each value of the property","optional":true,"nullable":false},{"name":"yield.value","types":["Object"],"description":"a value of the property","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"serialized_size-instance","type":"instance","name":"serialized_size","title":["Google","Cloud","Datastore","Entity#serialized_size"],"description":"<p>The number of bytes the Entity will take to serialize during API\ncalls.</p>","source":"google-cloud-datastore/lib/google/cloud/datastore/entity.rb#L423","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}]}