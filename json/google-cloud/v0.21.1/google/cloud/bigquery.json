{"id":"google/cloud/bigquery","name":"Bigquery","title":["Google","Cloud","Bigquery"],"description":"<h1 id=\"google-cloud-bigquery\">Google Cloud BigQuery</h1>\n\n<p>Google Cloud BigQuery enables super-fast, SQL-like queries against massive\ndatasets, using the processing power of Google’s infrastructure. To learn\nmore, read <a href=\"https://cloud.google.com/bigquery/what-is-bigquery\">What is\nBigQuery?</a>.</p>\n\n<p>The goal of google-cloud is to provide an API that is comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"google/cloud\" data-method=\"bigquery-instance\">Google::Cloud#bigquery</a>. You can\nprovide the project and credential information to connect to the BigQuery\nservice, or if you are running on Google Compute Engine this configuration\nis taken care of for you. You can read more about the options for\nconnecting in the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<p>To help you get started quickly, the first few examples below use a public\ndataset provided by Google. As soon as you have <a href=\"https://cloud.google.com/bigquery/sign-up\">signed\nup</a> to use BigQuery, and\nprovided that you stay in the free tier for queries, you should be able to\nrun these first examples without the need to set up billing or to load\ndata (although we’ll show you how to do that too.)</p>\n\n<h2 id=\"listing-datasets-and-tables\">Listing Datasets and Tables</h2>\n\n<p>A BigQuery project holds datasets, which in turn hold tables. Assuming\nthat you have not yet created datasets or tables in your own project,\nlet’s connect to Google’s <code>publicdata</code> project, and see what you find.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new project: \"publicdata\"\n\nbigquery.datasets.count #=&gt; 1\nbigquery.datasets.first.dataset_id #=&gt; \"samples\"\n\ndataset = bigquery.datasets.first\ntables = dataset.tables\n\ntables.count #=&gt; 7\ntables.map &amp;:table_id #=&gt; [..., \"shakespeare\", \"trigrams\", \"wikipedia\"]\n</code></pre>\n\n<p>In addition listing all datasets and tables in the project, you can also\nretrieve individual datasets and tables by ID. Let’s look at the structure\nof the <code>shakespeare</code> table, which contains an entry for every word in\nevery play written by Shakespeare.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new project: \"publicdata\"\n\ndataset = bigquery.dataset \"samples\"\ntable = dataset.table \"shakespeare\"\n\ntable.headers #=&gt; [\"word\", \"word_count\", \"corpus\", \"corpus_date\"]\ntable.rows_count #=&gt; 164656\n</code></pre>\n\n<p>Now that you know the column names for the Shakespeare table, you can\nwrite and run a query.</p>\n\n<h2 id=\"running-queries\">Running queries</h2>\n\n<p>BigQuery offers both synchronous and asynchronous methods, as explained in\n<a href=\"https://cloud.google.com/bigquery/querying-data\">Querying Data</a>.</p>\n\n<h3 id=\"synchronous-queries\">Synchronous queries</h3>\n\n<p>Let’s start with the simpler synchronous approach. Notice that this time\nyou are connecting using your own default project. This is necessary for\nrunning a query, since queries need to be able to create tables to hold\nresults.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\n\nsql = \"SELECT TOP(word, 50) as word, COUNT(*) as count \" +\n      \"FROM publicdata:samples.shakespeare\"\ndata = bigquery.query sql\n\ndata.count #=&gt; 50\ndata.next? #=&gt; false\ndata.first #=&gt; {\"word\"=&gt;\"you\", \"count\"=&gt;42}\n</code></pre>\n\n<p>The <code>TOP</code> function shown above is just one of a variety of functions\noffered by BigQuery. See the <a href=\"https://cloud.google.com/bigquery/query-reference\">Query\nReference</a> for a full\nlisting.</p>\n\n<h3 id=\"asynchronous-queries\">Asynchronous queries</h3>\n\n<p>Because you probably should not block for most BigQuery operations,\nincluding querying as well as importing, exporting, and copying data, the\nBigQuery API enables you to manage longer-running jobs. In the\nasynchronous approach to running a query, an instance of\n<a data-custom-type=\"google/cloud/bigquery/queryjob\">Google::Cloud::Bigquery::QueryJob</a> is returned, rather than an instance\nof <a data-custom-type=\"google/cloud/bigquery/querydata\">Google::Cloud::Bigquery::QueryData</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\n\nsql = \"SELECT TOP(word, 50) as word, COUNT(*) as count \" +\n      \"FROM publicdata:samples.shakespeare\"\njob = bigquery.query_job sql\n\njob.wait_until_done!\nif !job.failed?\n  job.query_results.each do |row|\n    puts row[\"word\"]\n  end\nend\n</code></pre>\n\n<p>Once you have determined that the job is done and has not failed, you can\nobtain an instance of <a data-custom-type=\"google/cloud/bigquery/querydata\">Google::Cloud::Bigquery::QueryData</a> by calling\n<a data-custom-type=\"google/cloud/bigquery/queryjob\" data-method=\"query_results-instance\">Google::Cloud::Bigquery::QueryJob#query_results</a>. The query results for\nboth of the above examples are stored in temporary tables with a lifetime\nof about 24 hours. See the final example below for a demonstration of how\nto store query results in a permanent table.</p>\n\n<h2 id=\"creating-datasets-and-tables\">Creating Datasets and Tables</h2>\n\n<p>The first thing you need to do in a new BigQuery project is to create a\n<a data-custom-type=\"google/cloud/bigquery/dataset\">Google::Cloud::Bigquery::Dataset</a>. Datasets hold tables and control\naccess to them.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\n\ndataset = bigquery.create_dataset \"my_dataset\"\n</code></pre>\n\n<p>Now that you have a dataset, you can use it to create a table. Every table\nis defined by a schema that may contain nested and repeated fields. The\nexample below shows a schema with a repeated record field named\n<code>cities_lived</code>. (For more information about nested and repeated fields,\nsee <a href=\"https://cloud.google.com/bigquery/preparing-data-for-bigquery\">Preparing Data for\nBigQuery</a>.)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\ndataset = bigquery.dataset \"my_dataset\"\n\ntable = dataset.create_table \"people\" do |schema|\n  schema.string \"first_name\", mode: :required\n  schema.record \"cities_lived\", mode: :repeated do |nested_schema|\n    nested_schema.string \"place\", mode: :required\n    nested_schema.integer \"number_of_years\", mode: :required\n  end\nend\n</code></pre>\n\n<p>Because of the repeated field in this schema, we cannot use the CSV format\nto load data into the table.</p>\n\n<h2 id=\"loading-records\">Loading records</h2>\n\n<p>In addition to CSV, data can be imported from files that are formatted as\n<a href=\"http://jsonlines.org/\">Newline-delimited JSON</a> or\n<a href=\"http://avro.apache.org/\">Avro</a>, or from a Google Cloud Datastore backup.\nIt can also be “streamed” into BigQuery.</p>\n\n<p>To follow along with these examples, you will need to set up billing on\nthe <a href=\"https://console.developers.google.com\">Google Developers Console</a>.</p>\n\n<h3 id=\"streaming-records\">Streaming records</h3>\n\n<p>For situations in which you want new data to be available for querying as\nsoon as possible, inserting individual records directly from your Ruby\napplication is a great approach.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"people\"\n\nrows = [\n    {\n        \"first_name\" =&gt; \"Anna\",\n        \"cities_lived\" =&gt; [\n            {\n                \"place\" =&gt; \"Stockholm\",\n                \"number_of_years\" =&gt; 2\n            }\n        ]\n    },\n    {\n        \"first_name\" =&gt; \"Bob\",\n        \"cities_lived\" =&gt; [\n            {\n                \"place\" =&gt; \"Seattle\",\n                \"number_of_years\" =&gt; 5\n            },\n            {\n                \"place\" =&gt; \"Austin\",\n                \"number_of_years\" =&gt; 6\n            }\n        ]\n    }\n]\ntable.insert rows\n</code></pre>\n\n<p>There are some trade-offs involved with streaming, so be sure to read the\ndiscussion of data consistency in <a href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery\">Streaming Data Into\nBigQuery</a>.</p>\n\n<h3 id=\"uploading-a-file\">Uploading a file</h3>\n\n<p>To follow along with this example, please download the\n<a href=\"http://www.ssa.gov/OACT/babynames/names.zip\">names.zip</a> archive from the\nU.S. Social Security Administration. Inside the archive you will find over\n100 files containing baby name records since the year 1880. A PDF file\nalso contained in the archive specifies the schema used below.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.create_table \"baby_names\" do |schema|\n  schema.string \"name\", mode: :required\n  schema.string \"sex\", mode: :required\n  schema.integer \"number\", mode: :required\nend\n\nfile = File.open \"names/yob2014.txt\"\nload_job = table.load file, format: \"csv\"\n</code></pre>\n\n<p>Because the names data, although formatted as CSV, is distributed in files\nwith a <code>.txt</code> extension, this example explicitly passes the <code>format</code>\noption in order to demonstrate how to handle such situations. Because CSV\nis the default format for load operations, the option is not actually\nnecessary. For JSON saved with a <code>.txt</code> extension, however, it would be.</p>\n\n<h2 id=\"exporting-query-results-to-google-cloud-storage\">Exporting query results to Google Cloud Storage</h2>\n\n<p>The example below shows how to pass the <code>table</code> option with a query in\norder to store results in a permanent table. It also shows how to export\nthe result data to a Google Cloud Storage file. In order to follow along,\nyou will need to enable the Google Cloud Storage API in addition to\nsetting up billing.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\ndataset = bigquery.dataset \"my_dataset\"\nsource_table = dataset.table \"baby_names\"\nresult_table = dataset.create_table \"baby_names_results\"\n\nsql = \"SELECT name, number as count \" +\n      \"FROM baby_names \" +\n      \"WHERE name CONTAINS 'Sam' \" +\n      \"ORDER BY count DESC\"\nquery_job = dataset.query_job sql, table: result_table\n\nquery_job.wait_until_done!\n\nif !query_job.failed?\n\n  require \"google/cloud/bigquery\"\n\n  storage = Google::Cloud::Storage.new\n  bucket_id = \"bigquery-exports-#{SecureRandom.uuid}\"\n  bucket = storage.create_bucket bucket_id\n  extract_url = \"gs://#{bucket.id}/baby-names-sam.csv\"\n\n  extract_job = result_table.extract extract_url\n\n  extract_job.wait_until_done!\n\n  # Download to local filesystem\n  bucket.files.first.download \"baby-names-sam.csv\"\n\nend\n</code></pre>\n\n<p>If a table you wish to export contains a large amount of data, you can\npass a wildcard URI to export to multiple files (for sharding), or an\narray of URIs (for partitioning), or both. See <a href=\"https://cloud.google.com/bigquery/exporting-data-from-bigquery\">Exporting Data From\nBigQuery</a>\nfor details.</p>\n\n<h2 id=\"configuring-retries-and-timeout\">Configuring retries and timeout</h2>\n\n<p>You can configure how many times API requests may be automatically\nretried. When an API request fails, the response will be inspected to see\nif the request meets criteria indicating that it may succeed on retry,\nsuch as <code>500</code> and <code>503</code> status codes or a specific internal error code\nsuch as <code>rateLimitExceeded</code>. If it meets the criteria, the request will be\nretried after a delay. If another error occurs, the delay will be\nincreased before a subsequent attempt, until the <code>retries</code> limit is\nreached.</p>\n\n<p>You can also set the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new retries: 10, timeout: 120\n</code></pre>\n\n<p>See the <a href=\"https://cloud.google.com/bigquery/troubleshooting-errors#errortable\">BigQuery error\ntable</a>\nfor a list of error conditions.</p>","source":"google-cloud-bigquery/lib/google/cloud/bigquery.rb#L343","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Bigquery.new"],"description":"<p>Creates a new <code>Project</code> instance connected to the BigQuery service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-bigquery/lib/google/cloud/bigquery.rb#L376","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/bigquery\"\n\nbigquery = Google::Cloud::Bigquery.new\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\""}],"params":[{"name":"project","types":["String"],"description":"Identifier for a BigQuery project. If not\npresent, the default project for the credentials is used.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud. If\nfile path the file must be readable.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee # <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google #\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/bigquery</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"retries","types":["Integer"],"description":"Number of times to retry requests on server\nerror. The default value is <code>3</code>. Optional.","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigquery/project\">Google::Cloud::Bigquery::Project</a>"],"description":""}]}]}