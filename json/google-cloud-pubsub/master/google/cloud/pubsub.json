{"id":"google/cloud/pubsub","name":"Pubsub","title":["Google","Cloud","Pubsub"],"description":"<h1 id=\"google-cloud-pubsub\">Google Cloud Pub/Sub</h1>\n\n<p>Google Cloud Pub/Sub is designed to provide reliable, many-to-many,\nasynchronous messaging between applications. Publisher applications can\nsend messages to a “topic” and other applications can subscribe to that\ntopic to receive the messages. By decoupling senders and receivers, Google\nCloud Pub/Sub allows developers to communicate between independently\nwritten applications.</p>\n\n<p>The goal of google-cloud is to provide a API that is comfortable to\nRubyists. Authentication is handled by <a data-custom-type=\"google/cloud\" data-method=\"pubsub-instance\">Google::Cloud#pubsub</a>. You can\nprovide the project and credential information to connect to the Pub/Sub\nservice, or if you are running on Google Compute Engine this configuration\nis taken care of for you.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\"\n</code></pre>\n\n<p>To learn more about Pub/Sub, read the <a href=\"https://cloud.google.com/pubsub/overview\">Google Cloud Pub/Sub Overview\n</a>.</p>\n\n<h2 id=\"retrieving-topics\">Retrieving Topics</h2>\n\n<p>A Topic is a named resource to which messages are sent by publishers.\nA Topic is found by its name. (See <a data-custom-type=\"google/cloud/pubsub/project\" data-method=\"topic-instance\">Google::Cloud::Pubsub::Project#topic</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\ntopic = pubsub.topic \"my-topic\"\n</code></pre>\n\n<h2 id=\"creating-a-topic\">Creating a Topic</h2>\n\n<p>A Topic is created from a Project. (See\n<a data-custom-type=\"google/cloud/pubsub/project\" data-method=\"create_topic-instance\">Google::Cloud::Pubsub::Project#create_topic</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\ntopic = pubsub.create_topic \"my-topic\"\n</code></pre>\n\n<h2 id=\"retrieving-subscriptions\">Retrieving Subscriptions</h2>\n\n<p>A Subscription is a named resource representing the stream of messages\nfrom a single, specific Topic, to be delivered to the subscribing\napplication. A Subscription is found by its name. (See\n<a data-custom-type=\"google/cloud/pubsub/topic\" data-method=\"subscription-instance\">Google::Cloud::Pubsub::Topic#subscription</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nsubscription = topic.subscription \"my-topic-subscription\"\nputs subscription.name\n</code></pre>\n\n<h2 id=\"creating-a-subscription\">Creating a Subscription</h2>\n\n<p>A Subscription is created from a Topic. (See\n<a data-custom-type=\"google/cloud/pubsub/topic\" data-method=\"subscribe-instance\">Google::Cloud::Pubsub::Topic#subscribe</a> and\n<a data-custom-type=\"google/cloud/pubsub/project\" data-method=\"subscribe-instance\">Google::Cloud::Pubsub::Project#subscribe</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\"\nputs sub.name # =&gt; \"my-topic-sub\"\n</code></pre>\n\n<p>The subscription can be created that specifies the number of seconds to\nwait to be acknowledged as well as an endpoint URL to push the messages\nto:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\",\n                      deadline: 120,\n                      endpoint: \"https://example.com/push\"\n</code></pre>\n\n<h2 id=\"publishing-messages\">Publishing Messages</h2>\n\n<p>Messages are published to a topic. Any message published to a topic\nwithout a subscription will be lost. Ensure the topic has a subscription\nbefore publishing. (See <a data-custom-type=\"google/cloud/pubsub/topic\" data-method=\"publish-instance\">Google::Cloud::Pubsub::Topic#publish</a> and\n<a data-custom-type=\"google/cloud/pubsub/project\" data-method=\"publish-instance\">Google::Cloud::Pubsub::Project#publish</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"new-message\"\n</code></pre>\n\n<p>Messages can also be published with attributes:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"new-message\",\n                    foo: :bar,\n                    this: :that\n</code></pre>\n\n<p>Multiple messages can be published at the same time by passing a block:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nmsgs = topic.publish do |batch|\n  batch.publish \"new-message-1\", foo: :bar\n  batch.publish \"new-message-2\", foo: :baz\n  batch.publish \"new-message-3\", foo: :bif\nend\n</code></pre>\n\n<h2 id=\"pulling-messages\">Pulling Messages</h2>\n\n<p>Messages are pulled from a Subscription. (See\n<a data-custom-type=\"google/cloud/pubsub/subscription\" data-method=\"pull-instance\">Google::Cloud::Pubsub::Subscription#pull</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nmsgs = sub.pull\n</code></pre>\n\n<p>A maximum number of messages returned can also be specified:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\", max: 10\nmsgs = sub.pull\n</code></pre>\n\n<p>The request for messages can also block until messages are available.\n(See <a data-custom-type=\"google/cloud/pubsub/subscription\" data-method=\"wait_for_messages-instance\">Google::Cloud::Pubsub::Subscription#wait_for_messages</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nmsgs = sub.wait_for_messages\n</code></pre>\n\n<h2 id=\"acknowledging-a-message\">Acknowledging a Message</h2>\n\n<p>Messages that are received can be acknowledged in Pub/Sub, marking the\nmessage to be removed so it cannot be pulled again.</p>\n\n<p>A Message that can be acknowledged is called a ReceivedMessage.\nReceivedMessages can be acknowledged one at a time:\n(See <a data-custom-type=\"google/cloud/pubsub/receivedmessage\" data-method=\"acknowledge!-instance\">Google::Cloud::Pubsub::ReceivedMessage#acknowledge!</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.pull.each { |msg| msg.acknowledge! }\n</code></pre>\n\n<p>Or, multiple messages can be acknowledged in a single API call:\n(See <a data-custom-type=\"google/cloud/pubsub/subscription\" data-method=\"acknowledge-instance\">Google::Cloud::Pubsub::Subscription#acknowledge</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull\nsub.acknowledge received_messages\n</code></pre>\n\n<h2 id=\"modifying-a-deadline\">Modifying a Deadline</h2>\n\n<p>A message must be acknowledged after it is pulled, or Pub/Sub will mark\nthe message for redelivery. The message acknowledgement deadline can\ndelayed if more time is needed. This will allow more time to process the\nmessage before the message is marked for redelivery. (See\n<a data-custom-type=\"google/cloud/pubsub/receivedmessage\" data-method=\"delay!-instance\">Google::Cloud::Pubsub::ReceivedMessage#delay!</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nif received_message\n  puts received_message.message.data\n  # Delay for 2 minutes\n  received_message.delay! 120\nend\n</code></pre>\n\n<p>The message can also be made available for immediate redelivery:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nif received_message\n  puts received_message.message.data\n  # Mark for redelivery by setting the deadline to now\n  received_message.delay! 0\nend\n</code></pre>\n\n<p>Multiple messages can be delayed or made available for immediate\nredelivery: (See <a data-custom-type=\"google/cloud/pubsub/subscription\" data-method=\"delay-instance\">Google::Cloud::Pubsub::Subscription#delay</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull\nsub.delay 120, received_messages\n</code></pre>\n\n<h2 id=\"listening-for-messages\">Listening for Messages</h2>\n\n<p>Long running workers are easy to create with <code>listen</code>, which runs an\ninfinitely blocking loop to process messages as they are received. (See\n<a data-custom-type=\"google/cloud/pubsub/subscription\" data-method=\"listen-instance\">Google::Cloud::Pubsub::Subscription#listen</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen do |msg|\n  # process msg\nend\n</code></pre>\n\n<p>Messages are retrieved in batches for efficiency. The number of messages\npulled per batch can be limited with the <code>max</code> option:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen max: 20 do |msg|\n  # process msg\nend\n</code></pre>\n\n<p>When processing time and the acknowledgement deadline are a concern,\nmessages can be automatically acknowledged as they are pulled with the\n<code>autoack</code> option:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen autoack: true do |msg|\n  # process msg\nend\n</code></pre>\n\n<h2 id=\"configuring-timeout\">Configuring timeout</h2>\n\n<p>You can configure the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new timeout: 120\n</code></pre>\n\n<h2 id=\"working-across-projects\">Working Across Projects</h2>\n\n<p>All calls to the Pub/Sub service use the same project and credentials\nprovided to the <a data-custom-type=\"google/cloud\" data-method=\"pubsub-instance\">Google::Cloud#pubsub</a> method. However, it is common to\nreference topics or subscriptions in other projects, which can be achieved\nby using the <code>project</code> option. The main credentials must have permissions\nto the topics and subscriptions in other projects.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new # my-project-id\n\n# Get a topic in the current project\nmy_topic = pubsub.topic \"my-topic\"\nmy_topic.name #=&gt; \"projects/my-project-id/topics/my-topic\"\n# Get a topic in another project\nother_topic = pubsub.topic \"other-topic\", project: \"other-project-id\"\nother_topic.name #=&gt; \"projects/other-project-id/topics/other-topic\"\n</code></pre>\n\n<p>It is possible to create a subscription in the current project that pulls\nfrom a topic in another project:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new # my-project-id\n\n# Get a topic in another project\ntopic = pubsub.topic \"other-topic\", project: \"other-project-id\"\n# Create a subscription in the current project that pulls from\n# the topic in another project\nsub = topic.subscribe \"my-sub\"\nsub.name #=&gt; \"projects/my-project-id/subscriptions/my-sub\"\nsub.topic.name #=&gt; \"projects/other-project-id/topics/other-topic\"\n</code></pre>\n\n<h2 id=\"using-the-google-cloud-pubsub-emulator\">Using the Google Cloud Pub/Sub Emulator</h2>\n\n<p>To develop and test your application locally, you can use the <a href=\"https://cloud.google.com/pubsub/emulator\">Google\nCloud Pub/Sub Emulator</a>, which\nprovides <a href=\"https://cloud.google.com/sdk/gcloud/reference/beta/emulators/\">local\nemulation</a>\nof the production Google Cloud Pub/Sub environment. You can start the\nGoogle Cloud Pub/Sub emulator using the <code>gcloud</code> command-line tool.</p>\n\n<p>To configure your ruby code to use the emulator, set the\n<code>PUBSUB_EMULATOR_HOST</code> environment variable to the host and port where the\nemulator is running. The value can be set as an environment variable in\nthe shell running the ruby code, or can be set directly in the ruby code\nas shown below.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\n# Make Pub/Sub use the emulator\nENV[\"PUBSUB_EMULATOR_HOST\"] = \"localhost:8918\"\n\npubsub = Google::Cloud::Pubsub.new \"emulator-project-id\"\n\n# Get a topic in the current project\nmy_topic = pubsub.new_topic \"my-topic\"\nmy_topic.name #=&gt; \"projects/emulator-project-id/topics/my-topic\"\n</code></pre>","source":"google-cloud-pubsub/lib/google/cloud/pubsub.rb#L406","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Pubsub.new"],"description":"<p>Creates a new object for connecting to the Pub/Sub service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub.rb#L441","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\""}],"params":[{"name":"project","types":["String"],"description":"Project identifier for the Pub/Sub service you\nare connecting to.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud. If\nfile path the file must be readable.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/pubsub</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/pubsub/project\">Google::Cloud::Pubsub::Project</a>"],"description":""}]}]}