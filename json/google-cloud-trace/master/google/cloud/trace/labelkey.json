{"id":"google/cloud/trace/labelkey","name":"LabelKey","title":["Google","Cloud","Trace","LabelKey"],"description":"<p>A collection of well-known label keys for trace spans.</p>","source":"google-cloud-trace/lib/google/cloud/trace/label_key.rb#L24","resources":[],"examples":[],"methods":[{"id":"set_stack_trace-class","type":"class","name":"set_stack_trace","title":["Google","Cloud","Trace","LabelKey.set_stack_trace"],"description":"<p>Set the stack trace label in the given labels hash. The current call\nstack is formatted so the Stackdriver UI will display it.</p>","source":"google-cloud-trace/lib/google/cloud/trace/label_key.rb#L107","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/trace\"\n\ntrace = Google::Cloud::Trace.new\nspan = trace.create_span \"root_span\"\nGoogle::Cloud::Trace::LabelKey.set_stack_trace span.labels"}],"params":[{"name":"labels","types":["Hash"],"description":"The labels hash in which to set the stack trace\nlabel value.","optional":false,"nullable":false},{"name":"stack_frames","types":["Array<Thread::Backtrace::Location>"],"description":"The current\ncaller stack as returned from <code>::Kernel.caller_locations</code>. If\nnot set, <code>::Kernel.caller_locations</code> is called internally.","optional":true,"default":"nil","nullable":true},{"name":"skip_frames","types":["Integer"],"description":"Passed to the internal invocation of\n<code>::Kernel.caller_locations</code> if one is needed.","optional":true,"default":"1","nullable":false},{"name":"truncate_stack","types":["Proc"],"description":"A procedure that allows skipping of\nthe “topmost” stack frames. Stack frames, represented by\ninstances of <code>Thread::Backtrace::Location</code>, are passed to this\nproc beginning with the topmost frame. As long as the proc\nreturns a falsy value, those frames are dropped. Once the proc\nreturns true for the first time, that frame and all remaining\nframes (possibly subject to <code>filter_stack</code>) are used. If not set,\nno frames are skipped.","optional":true,"default":"nil","nullable":true},{"name":"filter_stack","types":["Proc"],"description":"A procedure that allows skipping of\nstack frames in the middle of the stack trace. After possibly\nskipping frames using <code>truncate_stack</code>, all remaining frames are\npassed to this proc as <code>Thread::Backtrace::Location</code> objects.\nThose for whom the proc returns a falsy value are skipped. If\nthis parameter is not set, no filtering is done and all frames\nare presented in the stack trace.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]}]}