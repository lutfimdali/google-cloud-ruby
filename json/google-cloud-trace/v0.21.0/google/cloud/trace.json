{"id":"google/cloud/trace","name":"Trace","title":["Google","Cloud","Trace"],"description":"<h1 id=\"stackdriver-trace\">Stackdriver Trace</h1>\n\n<p>The Stackdriver Trace service collects and stores latency data from your\napplication and displays it in the Google Cloud Platform Console, giving\nyou detailed near-real-time insight into application performance.</p>\n\n<p>The Stackdriver Trace Ruby library, <code>google-cloud-trace</code>, provides:</p>\n\n<ul>\n  <li>Easy-to-use trace instrumentation that collects and collates latency\ndata for your Ruby application. If you just want latency trace data\nfor your application to appear on the Google Cloud Platform Console,\nsee the section on <a data-anchor=\"instrumenting-your-app\" href=\"#instrumenting-your-app\">instrumenting your app</a>.</li>\n  <li>An idiomatic Ruby API for querying, analyzing, and manipulating trace\ndata in your Ruby application. For an introduction to the Trace API,\nsee the section on the <a data-anchor=\"stackdriver-trace-api\" href=\"#stackdriver-trace-api\">Trace API</a>.</li>\n</ul>\n\n<h2 id=\"instrumenting-your-app\">Instrumenting Your App</h2>\n\n<p>This library integrates with Rack-based web frameworks such as Ruby On\nRails to provide latency trace reports for your application.\nSpecifcally, it:</p>\n\n<ul>\n  <li>Provides a Rack middleware that automatically reports latency traces\nfor http requests handled by your application, and measures the\nlatency of each request as a whole.</li>\n  <li>Integrates with <code>ActiveSupport::Notifications</code> to add important\nlatency-affecting events such as ActiveRecord queries to the trace.</li>\n  <li>Provides a simple API for your application code to define and\nmeasure latency-affecting processes specific to your application.</li>\n</ul>\n\n<p>When this library is installed and configured in your running\napplication, you can view your application’s latency traces in real time\nby opening the Google Cloud Console in your web browser and navigating\nto the “Trace” section. It also integrates with Google App Engine\nFlexible and Google Container Engine to provide additional information\nfor applications hosted in those environments.</p>\n\n<p>Note that not all requests will have traces. By default, the library will\nsample about one trace every ten seconds per Ruby process, to prevent\nheavily used applications from reporting too much data. It will also\nomit certain requests used by Google App Engine for health checking. See\n<a data-custom-type=\"google/cloud/trace/timesampler\">Google::Cloud::Trace::TimeSampler</a> for more details.</p>\n\n<h3 id=\"using-instrumentation-with-ruby-on-rails\">Using instrumentation with Ruby on Rails</h3>\n\n<p>To install application instrumentation in your Ruby on Rails app, add\nthis gem, <code>google-cloud-trace</code>, to your Gemfile and update your bundle.\nThen add the following line to your <code>config/application.rb</code> file:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/trace/rails\"\n</code></pre>\n\n<p>This will install a Railtie that automatically integrates with the\nRails framework, installing the middleware and the ActiveSupport\nintegration for you. Your application traces, including basic request\ntracing, ActiveRecord query measurements, and view render measurements,\nshould then start appearing in the Cloud Console.</p>\n\n<p>See the <a data-custom-type=\"google/cloud/trace/railtie\">Google::Cloud::Trace::Railtie</a> class for more information,\nincluding how to customize your application traces.</p>\n\n<h3 id=\"using-instrumentation-with-sinatra\">Using instrumentation with Sinatra</h3>\n\n<p>To install application instrumentation in your Sinatra app, add this gem,\n<code>google-cloud-trace</code>, to your Gemfile and update your bundle. Then add\nthe following lines to your main application Ruby file:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/trace\"\nuse Google::Cloud::Trace::Middleware\n</code></pre>\n\n<p>This will install the trace middleware in your application, providing\nbasic request tracing for your application. You may measure additional\nprocesses such as database queries or calls to external services using\nother classes in this library. See the <a data-custom-type=\"google/cloud/trace/middleware\">Google::Cloud::Trace::Middleware</a>\ndocumentation for more information.</p>\n\n<h3 id=\"using-instrumentation-with-other-rack-based-frameworks\">Using instrumentation with other Rack-based frameworks</h3>\n\n<p>To install application instrumentation in an app using another Rack-based\nweb framework, add this gem, <code>google-cloud-trace</code>, to your Gemfile and\nupdate your bundle. Then add install the trace middleware in your\nmiddleware stack. In most cases, this means adding these lines to your\n<code>config.ru</code> Rack configuration file:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/trace\"\nuse Google::Cloud::Trace::Middleware\n</code></pre>\n\n<p>Some web frameworks have an alternate mechanism for modifying the\nmiddleware stack. Consult your web framework’s documentation for more\ninformation.</p>\n\n<h3 id=\"the-stackdriver-diagnostics-suite\">The Stackdriver diagnostics suite</h3>\n\n<p>The trace library is part of the Stackdriver diagnostics suite, which\nalso includes error reporting and log analysis. If you include the\n<code>stackdriver</code> gem in your Gemfile, this trace library will be included\nautomatically. In addition, if you include the <code>stackdriver</code> gem in an\napplication using Ruby On Rails, the Railtie will be installed\nautomatically; you will not need to write any code to view latency\ntraces for your appl. See the documentation for the “stackdriver” gem\nfor more details.</p>\n\n<h2 id=\"stackdriver-trace-api\">Stackdriver Trace API</h2>\n\n<p>This library also includes an easy to use Ruby client for the\nStackdriver Trace API. This API provides calls to report and modify\napplication traces, as well as to query and analyze existing traces.</p>\n\n<p>For further information on the trace API, see\n<a data-custom-type=\"google/cloud/trace/project\">Google::Cloud::Trace::Project</a>.</p>\n\n<h3 id=\"querying-traces-using-the-api\">Querying traces using the API</h3>\n\n<p>Using the Stackdriver Trace API, your application can query and analyze\nits own traces and traces of other projects. Here is an example query\nfor all traces in the past hour.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/trace\"\ntrace_client = Google::Cloud::Trace.new\n\ntraces = trace_client.list_traces Time.now - 3600, Time.now\ntraces.each do |trace|\n  puts \"Retrieved trace ID: #{trace.trace_id}\"\nend\n</code></pre>\n\n<p>Each trace is an object of type <a data-custom-type=\"google/cloud/trace/tracerecord\">Google::Cloud::Trace::TraceRecord</a>,\nwhich provides methods for analyzing tasks that took place during the\nrequest trace. See https://cloud.google.com/trace for more information\non the kind of data you can capture in a trace.</p>\n\n<h3 id=\"reporting-traces-using-the-api\">Reporting traces using the API</h3>\n\n<p>Usually it is easiest to use this library’s trace instrumentation\nfeatures to collect and record application trace information. However,\nyou may also use the trace API to update this data. Here is an example:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/trace\"\n\ntrace_client = Google::Cloud::Trace.new\n\ntrace = Google::Cloud::Trace.new\ntrace.in_span \"root_span\" do\n  # Do stuff...\nend\n\ntrace_client.patch_traces trace\n</code></pre>","source":"google-cloud-trace/lib/google/cloud/trace.rb#L191","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Trace.new"],"description":"<p>Creates a new object for connecting to the Stackdriver Trace service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-trace/lib/google/cloud/trace.rb#L225","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/trace\"\n\ntrace_client = Google::Cloud::Trace.new\n\ntraces = trace_client.list_traces Time.now - 3600, Time.now\ntraces.each do |trace|\n  puts \"Retrieved trace ID: #{trace.trace_id}\"\nend"}],"params":[{"name":"project","types":["String"],"description":"Project identifier for the Stackdriver Trace\nservice.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud:\neither the JSON data or the path to a readable file.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.\nThe default scope is <code>https://www.googleapis.com/auth/cloud-platform</code>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/trace/project\">Google::Cloud::Trace::Project</a>"],"description":""}]},{"id":"set-class","type":"class","name":"set","title":["Google","Cloud","Trace.set"],"description":"<p>Set the current trace span being measured for the current thread, or\nthe current trace if no span is currently open. This may be used with\nweb frameworks that assign a thread to each request, to track the\ntrace instrumentation state for the request being handled. You may use\n<a data-custom-type=\"google/cloud/trace\" data-method=\"get-class\">Google::Cloud::Trace.get</a> to retrieve the data.</p>","source":"google-cloud-trace/lib/google/cloud/trace.rb#L262","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/trace\"\n\ntrace_client = Google::Cloud::Trace.new\ntrace = trace_client.new_trace\nGoogle::Cloud::Trace.set trace\n\n# Later...\nGoogle::Cloud::Trace.get.create_span \"my_span\""}],"params":[{"name":"trace","types":["Google::Cloud::Trace::TraceSpan","Google::Cloud::Trace::TraceRecord","nil"],"description":"The current span\nbeing measured, the current trace object, or <code>nil</code> if none.","optional":false,"nullable":true}],"exceptions":[],"returns":[]},{"id":"get-class","type":"class","name":"get","title":["Google","Cloud","Trace.get"],"description":"<p>Retrieve the current trace span or trace object for the current thread.\nThis data should previously have been set using\n<a data-custom-type=\"google/cloud/trace\" data-method=\"set-class\">Google::Cloud::Trace.set</a>.</p>","source":"google-cloud-trace/lib/google/cloud/trace.rb#L287","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/trace\"\n\ntrace_client = Google::Cloud::Trace.new\ntrace = trace_client.new_trace\nGoogle::Cloud::Trace.set trace\n\n# Later...\nGoogle::Cloud::Trace.get.create_span \"my_span\""}],"params":[],"exceptions":[],"returns":[{"types":["Google::Cloud::Trace::TraceSpan","<a data-custom-type=\"google/cloud/trace/tracerecord\">Google::Cloud::Trace::TraceRecord</a>","nil"],"description":"The span or trace object,\nor <code>nil</code>."}]},{"id":"in_span-class","type":"class","name":"in_span","title":["Google","Cloud","Trace.in_span"],"description":"<p>Open a new span for the current thread, instrumenting the given block.\nThe span is created within the current thread’s trace context as set by\n<a data-custom-type=\"google/cloud/trace\" data-method=\"set-class\">Google::Cloud::Trace.set</a>. The context is updated so any further calls\nwithin the block will create subspans. The new span is also yielded to\nthe block.</p>\n\n<p>Does nothing if there is no trace context for the current thread.</p>","source":"google-cloud-trace/lib/google/cloud/trace.rb#L322","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/trace\"\n\ntrace_client = Google::Cloud::Trace.new\ntrace = trace_client.new_trace\nGoogle::Cloud::Trace.set trace\n\nGoogle::Cloud::Trace.in_span \"my_span\" do |span|\n  span.labels[\"foo\"] = \"bar\"\n  # Do stuff...\n\n  Google::Cloud::Trace.in_span \"my_subspan\" do |subspan|\n    subspan.labels[\"foo\"] = \"sub-bar\"\n    # Do other stuff...\n  end\nend"}],"params":[{"name":"name","types":["String"],"description":"Name of the span to create","optional":false,"nullable":false},{"name":"kind","types":["Google::Cloud::Trace::SpanKind"],"description":"Kind of span to create.\nOptional.","optional":true,"default":"Google::Cloud::Trace::SpanKind::UNSPECIFIED","nullable":false},{"name":"labels","types":["Hash{String => String}"],"description":"Labels for the span","optional":true,"default":"{}","nullable":false}],"exceptions":[],"returns":[]}]}