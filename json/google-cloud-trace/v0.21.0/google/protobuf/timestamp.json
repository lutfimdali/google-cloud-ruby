{"id":"google/protobuf/timestamp","name":"Timestamp","title":["Google","Protobuf","Timestamp"],"description":"<p>A Timestamp represents a point in time independent of any time zone\nor calendar, represented as seconds and fractions of seconds at\nnanosecond resolution in UTC Epoch time. It is encoded using the\nProleptic Gregorian Calendar which extends the Gregorian calendar\nbackwards to year one. It is encoded assuming all minutes are 60\nseconds long, i.e. leap seconds are “smeared” so that no leap second\ntable is needed for interpretation. Range is from\n0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\nBy restricting to that range, we ensure that we can convert to\nand from  RFC 3339 date strings.\nSee https://www.ietf.org/rfc/rfc3339.txt[https://www.ietf.org/rfc/rfc3339.txt].</p>\n\n<p>Example 1: Compute Timestamp from POSIX +time()+.</p>\n\n<pre><code>Timestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);\n</code></pre>\n\n<p>Example 2: Compute Timestamp from POSIX +gettimeofday()+.</p>\n\n<pre><code>struct timeval tv;\ngettimeofday(&amp;tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);\n</code></pre>\n\n<p>Example 3: Compute Timestamp from Win32 +GetSystemTimeAsFileTime()+.</p>\n\n<pre><code>FILETIME ft;\nGetSystemTimeAsFileTime(&amp;ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) &lt;&lt; 32) | ft.dwLowDateTime;\n\n// A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n// is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n</code></pre>\n\n<p>Example 4: Compute Timestamp from Java +System.currentTimeMillis()+.</p>\n\n<pre><code>long millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n    .setNanos((int) ((millis % 1000) * 1000000)).build();\n</code></pre>\n\n<p>Example 5: Compute Timestamp from current time in Python.</p>\n\n<pre><code>now = time.time()\nseconds = int(now)\nnanos = int((now - seconds) * 10**9)\ntimestamp = Timestamp(seconds=seconds, nanos=nanos)\n</code></pre>","source":"google-cloud-trace/lib/google/cloud/trace/v1/doc/google/protobuf/timestamp.rb#L81","resources":[],"examples":[],"methods":[{"id":"seconds-instance","type":"instance","name":"seconds","title":["Google","Protobuf","Timestamp#seconds"],"description":"","source":"google-cloud-trace/lib/google/cloud/trace/v1/doc/google/protobuf/timestamp.rb#L81","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."}]},{"id":"seconds=-instance","type":"instance","name":"seconds=","title":["Google","Protobuf","Timestamp#seconds="],"description":"","source":"google-cloud-trace/lib/google/cloud/trace/v1/doc/google/protobuf/timestamp.rb#L81","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."}]},{"id":"nanos-instance","type":"instance","name":"nanos","title":["Google","Protobuf","Timestamp#nanos"],"description":"","source":"google-cloud-trace/lib/google/cloud/trace/v1/doc/google/protobuf/timestamp.rb#L81","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive."}]},{"id":"nanos=-instance","type":"instance","name":"nanos=","title":["Google","Protobuf","Timestamp#nanos="],"description":"","source":"google-cloud-trace/lib/google/cloud/trace/v1/doc/google/protobuf/timestamp.rb#L81","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive."}]}]}