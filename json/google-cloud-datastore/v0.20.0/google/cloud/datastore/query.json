{"id":"google/cloud/datastore/query","name":"Query","title":["Google","Cloud","Datastore","Query"],"description":"<h1 id=\"query\">Query</h1>\n\n<p>Represents the search criteria against a Datastore.</p>","source":"lib/google/cloud/datastore/query.rb#L41","resources":[{"title":"Datastore\nQueries","link":"https://cloud.google.com/datastore/docs/concepts/queries"},{"title":"Datastore Metadata","link":"https://cloud.google.com/datastore/docs/concepts/metadataqueries"}],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"done\", \"=\", false).\n  where(\"priority\", \">=\", 4).\n  order(\"priority\", :desc)\n\ntasks = datastore.run query"}],"methods":[{"id":"initialize-constructor","type":"constructor","name":"initialize","title":["Google","Cloud","Datastore","Query#initialize"],"description":"<p>Returns a new query object.</p>","source":"lib/google/cloud/datastore/query.rb#L48","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/datastore/query\">Query</a>"],"description":"a new instance of Query"}]},{"id":"kind-instance","type":"instance","name":"kind","title":["Google","Cloud","Datastore","Query#kind"],"description":"<p>Add the kind of entities to query.</p>\n\n<p>Special entity kinds such as <code>__namespace__</code>, <code>__kind__</code>, and\n<code>__property__</code> can be used for <a href=\"https://cloud.google.com/datastore/docs/concepts/metadataqueries\">metadata\nqueries</a>.</p>","source":"lib/google/cloud/datastore/query.rb#L65","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind \"Task\"\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]},{"id":"where-instance","type":"instance","name":"where","title":["Google","Cloud","Datastore","Query#where"],"description":"<p>Add a property filter to the query.</p>","source":"lib/google/cloud/datastore/query.rb#L131","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"done\", \"=\", false)\n\ntasks = datastore.run query"},{"caption":"<p>Add a composite property filter:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"done\", \"=\", false).\n  where(\"priority\", \">=\", 4)\n\ntasks = datastore.run query"},{"caption":"<p>Add an inequality filter on a <strong>single</strong> property only:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"created\", \">=\", Time.utc(1990, 1, 1)).\n  where(\"created\", \"<\", Time.utc(2000, 1, 1))\n\ntasks = datastore.run query"},{"caption":"<p>Add a composite filter on an array property:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"tag\", \"=\", \"fun\").\n  where(\"tag\", \"=\", \"programming\")\n\ntasks = datastore.run query"},{"caption":"<p>Add an inequality filter on an array property :</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"tag\", \">\", \"learn\").\n  where(\"tag\", \"<\", \"math\")\n\ntasks = datastore.run query"},{"caption":"<p>Add a key filter using the special property <code>__key__</code>:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"__key__\", \">\", datastore.key(\"Task\", \"someTask\"))\n\ntasks = datastore.run query"},{"caption":"<p>Add a key filter to a <em>kindless</em> query:</p>","code":"last_seen_key = datastore.key \"Task\", \"a\"\nquery = Google::Cloud::Datastore::Query.new\nquery.where(\"__key__\", \">\", last_seen_key)\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]},{"id":"ancestor-instance","type":"instance","name":"ancestor","title":["Google","Cloud","Datastore","Query#ancestor"],"description":"<p>Add a filter for entities that inherit from a key.</p>","source":"lib/google/cloud/datastore/query.rb#L163","resources":[],"examples":[{"caption":"","code":"task_list_key = datastore.key \"TaskList\", \"default\"\n\nquery = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  ancestor(task_list_key)\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]},{"id":"order-instance","type":"instance","name":"order","title":["Google","Cloud","Datastore","Query#order"],"description":"<p>Sort the results by a property name.\nBy default, an ascending sort order will be used.\nTo sort in descending order, provide a second argument\nof a string or symbol that starts with “d”.</p>","source":"lib/google/cloud/datastore/query.rb#L206","resources":[],"examples":[{"caption":"<p>With ascending sort order:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  order(\"created\")\n\ntasks = datastore.run query"},{"caption":"<p>With descending sort order:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  order(\"created\", :desc)\n\ntasks = datastore.run query"},{"caption":"<p>With multiple sort orders:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  order(\"priority\", :desc).\n  order(\"created\")\n\ntasks = datastore.run query"},{"caption":"<p>A property used in inequality filter must be ordered first:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"priority\", \">\", 3).\n  order(\"priority\").\n  order(\"created\")\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]},{"id":"limit-instance","type":"instance","name":"limit","title":["Google","Cloud","Datastore","Query#limit"],"description":"<p>Set a limit on the number of results to be returned.</p>","source":"lib/google/cloud/datastore/query.rb#L226","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  limit(5)\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]},{"id":"offset-instance","type":"instance","name":"offset","title":["Google","Cloud","Datastore","Query#offset"],"description":"<p>Set an offset for the results to be returned.</p>","source":"lib/google/cloud/datastore/query.rb#L243","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  limit(5).\n  offset(10)\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]},{"id":"start-instance","type":"instance","name":"start","title":["Google","Cloud","Datastore","Query#start"],"description":"<p>Set the cursor to start the results at.</p>","source":"lib/google/cloud/datastore/query.rb#L260","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  limit(page_size).\n  start(page_cursor)\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]},{"id":"select-instance","type":"instance","name":"select","title":["Google","Cloud","Datastore","Query#select"],"description":"<p>Retrieve only select properties from the matched entities.</p>","source":"lib/google/cloud/datastore/query.rb#L295","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  select(\"priority\", \"percent_complete\")\n\npriorities = []\npercent_completes = []\ndatastore.run(query).each do |task|\n  priorities << task[\"priority\"]\n  percent_completes << task[\"percent_complete\"]\nend"},{"caption":"<p>A keys-only query using the special property <code>__key__</code>:</p>","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  select(\"__key__\")\n\nkeys = datastore.run(query).map(&:key)"}],"params":[],"exceptions":[],"returns":[]},{"id":"group_by-instance","type":"instance","name":"group_by","title":["Google","Cloud","Datastore","Query#group_by"],"description":"<p>Group results by a list of properties.</p>","source":"lib/google/cloud/datastore/query.rb#L319","resources":[],"examples":[{"caption":"","code":"query = Google::Cloud::Datastore::Query.new\nquery.kind(\"Task\").\n  distinct_on(\"type\", \"priority\").\n  order(\"type\").\n  order(\"priority\")\n\ntasks = datastore.run query"}],"params":[],"exceptions":[],"returns":[]}]}