{"id":"dataset","metadata":{"name":"Dataset","description":"<h1 id=\"dataset\">Dataset</h1>\n\n<p>Dataset is the data saved in a project’s Datastore.\nDataset is analogous to a database in relational database world.</p>\n\n<p>Gcloud::Datastore::Dataset is the main object for interacting with\nGoogle Datastore. <a data-custom-type=\"datastore/entity\">Gcloud::Datastore::Entity</a> objects are created,\nread, updated, and deleted by Gcloud::Datastore::Dataset.</p>\n\n<p>See <a data-custom-type=\"gcloud#datastore\">Gcloud#datastore</a></p>","source":"lib/gcloud/datastore/dataset.rb#L50","resources":[],"examples":[{"caption":null,"code":"require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nquery = dataset.query(\"Task\").\n  where(\"completed\", \"=\", true)\n\ntasks = dataset.run query"}]},"methods":[{"metadata":{"name":"project","description":"<p>The Datastore project connected to.</p>","source":"lib/gcloud/datastore/dataset.rb#L76","resources":[],"examples":[{"caption":null,"code":"require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\n\ndataset = gcloud.datastore\ndataset.project #=> \"my-todo-project\""}]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"name":"allocate_ids","description":"<p>Generate IDs for a Key before creating an entity.</p>","source":"lib/gcloud/datastore/dataset.rb#L102","resources":[],"examples":[{"caption":null,"code":"empty_key = dataset.key \"Task\"\ntask_keys = dataset.allocate_ids empty_key, 5"}]},"params":[{"name":"incomplete_key","types":["Key"],"description":"A Key without <code class=\"highlighter-rouge\">id</code> or <code class=\"highlighter-rouge\">name</code> set.","optional":false,"nullable":false},{"name":"count","types":["String"],"description":"The number of new key IDs to create.","optional":true,"default":"1","nullable":false}],"exceptions":[],"returns":[{"types":["Array<Gcloud::Datastore::Key>"],"description":null}]},{"metadata":{"name":"save","description":"<p>Persist one or more entities to the Datastore.</p>","source":"lib/gcloud/datastore/dataset.rb#L125","resources":[],"examples":[{"caption":null,"code":"dataset.save task1, task2"}]},"params":[{"name":"*entities","types":["Entity"],"description":"One or more entity objects to be saved without\n<code class=\"highlighter-rouge\">id</code> or <code class=\"highlighter-rouge\">name</code> set.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Array<Gcloud::Datastore::Entity>"],"description":null}]},{"metadata":{"name":"find","description":"<p>Retrieve an entity by providing key information.</p>","source":"lib/gcloud/datastore/dataset.rb#L149","resources":[],"examples":[{"caption":"Finding an entity with a key:","code":"key = dataset.key \"Task\", 123456\ntask = dataset.find key"},{"caption":"Finding an entity with a <code class=\"highlighter-rouge\">kind</code> and <code class=\"highlighter-rouge\">id</code>/<code class=\"highlighter-rouge\">name</code>:","code":"task = dataset.find \"Task\", 123456"}]},"params":[{"name":"key_or_kind","types":["Key","String"],"description":"A Key object or <code class=\"highlighter-rouge\">kind</code> string value.","optional":false,"nullable":false},{"name":"id_or_name","types":["Integer","String","nil"],"description":"The Key’s <code class=\"highlighter-rouge\">id</code> or <code class=\"highlighter-rouge\">name</code> value\nif a <code class=\"highlighter-rouge\">kind</code> was provided in the first parameter.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["Gcloud::Datastore::Entity","nil"],"description":null}]},{"metadata":{"name":"find_all","description":"<p>Retrieve the entities for the provided keys.</p>","source":"lib/gcloud/datastore/dataset.rb#L172","resources":[],"examples":[{"caption":null,"code":"gcloud = Gcloud.new\ndataset = gcloud.datastore\nkey1 = dataset.key \"Task\", 123456\nkey2 = dataset.key \"Task\", 987654\ntasks = dataset.find_all key1, key2"}]},"params":[{"name":"*keys","types":["Key"],"description":"One or more Key objects to find records for.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Gcloud::Datastore::Dataset::LookupResults"],"description":null}]},{"metadata":{"name":"delete","description":"<p>Remove entities from the Datastore.</p>","source":"lib/gcloud/datastore/dataset.rb#L194","resources":[],"examples":[{"caption":null,"code":"gcloud = Gcloud.new\ndataset = gcloud.datastore\ndataset.delete entity1, entity2"}]},"params":[{"name":"*entities_or_keys","types":["Entity","Key"],"description":"One or more Entity or Key objects\nto remove.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Boolean"],"description":"Returns <code class=\"highlighter-rouge\">true</code> if successful"}]},{"metadata":{"name":"run","description":"<p>Retrieve entities specified by a Query.</p>","source":"lib/gcloud/datastore/dataset.rb#L223","resources":[],"examples":[{"caption":null,"code":"query = dataset.query(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query"},{"caption":"Run the query within a namespace with the <code class=\"highlighter-rouge\">namespace</code> option:","code":"query = Gcloud::Datastore::Query.new.kind(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query, namespace: \"ns~todo-project\""}]},"params":[{"name":"query","types":["Query"],"description":"The Query object with the search criteria.","optional":false,"nullable":false},{"name":"namespace","types":["String"],"description":"The namespace the query is to run within.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["Gcloud::Datastore::Dataset::QueryResults"],"description":null}]},{"metadata":{"name":"transaction","description":"<p>Creates a Datastore Transaction.</p>","source":"lib/gcloud/datastore/dataset.rb#L277","resources":[],"examples":[{"caption":"Runs the given block in a database transaction:","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nuser = dataset.entity \"User\", \"heidi\" do |u|\n  u[\"name\"] = \"Heidi Henderson\"\n  u[\"email\"] = \"heidi@example.net\"\nend\n\ndataset.transaction do |tx|\n  if tx.find(user.key).nil?\n    tx.save user\n  end\nend"},{"caption":"If no block is given, a Transaction object is returned:","code":"require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nuser = dataset.entity \"User\", \"heidi\" do |u|\n  u[\"name\"] = \"Heidi Henderson\"\n  u[\"email\"] = \"heidi@example.net\"\nend\n\ntx = dataset.transaction\nbegin\n  if tx.find(user.key).nil?\n    tx.save user\n  end\n  tx.commit\nrescue\n  tx.rollback\nend"}]},"params":[{"name":"yield","types":["block"],"description":"a block yielding a new transaction","optional":true,"nullable":false},{"name":"yield.tx","types":["Transaction"],"description":"the transaction object","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"name":"query","description":"<p>Create a new Query instance. This is a convenience method to make the\ncreation of Query objects easier.</p>","source":"lib/gcloud/datastore/dataset.rb#L309","resources":[],"examples":[{"caption":null,"code":"query = dataset.query(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query"},{"caption":"The previous example is equivalent to:","code":"query = Gcloud::Datastore::Query.new.\n  kind(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query"}]},"params":[{"name":"*kinds","types":["String"],"description":"The kind of entities to query. This is optional.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Gcloud::Datastore::Query"],"description":null}]},{"metadata":{"name":"key","description":"<p>Create a new Key instance. This is a convenience method to make the\ncreation of Key objects easier.</p>","source":"lib/gcloud/datastore/dataset.rb#L331","resources":[],"examples":[{"caption":null,"code":"key = dataset.key \"User\", \"heidi@example.com\""},{"caption":"The previous example is equivalent to:","code":"key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\""}]},"params":[{"name":"kind","types":["String"],"description":"The kind of the Key. This is optional.","optional":true,"default":"nil","nullable":true},{"name":"id_or_name","types":["Integer","String"],"description":"The id or name of the Key. This is\noptional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["Gcloud::Datastore::Key"],"description":null}]},{"metadata":{"name":"entity","description":"<p>Create a new empty Entity instance. This is a convenience method to make\nthe creation of Entity objects easier.</p>\n\n<p>end</p>","source":"lib/gcloud/datastore/dataset.rb#L377","resources":[],"examples":[{"caption":null,"code":"entity = dataset.entity"},{"caption":"The previous example is equivalent to:","code":"entity = Gcloud::Datastore::Entity.new"},{"caption":"The key can also be passed in as an object:","code":"key = dataset.key \"User\", \"heidi@example.com\"\nentity = dataset.entity key"},{"caption":"Or the key values can be passed in as parameters:","code":"entity = dataset.entity \"User\", \"heidi@example.com\""},{"caption":"The previous example is equivalent to:","code":"key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\"\nentity = Gcloud::Datastore::Entity.new\nentity.key = key"},{"caption":"The newly created entity can also be configured using a block:","code":"user = dataset.entity \"User\", \"heidi@example.com\" do |u|\n  u[\"name\"] = \"Heidi Henderson\""},{"caption":"The previous example is equivalent to:","code":"key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\"\nentity = Gcloud::Datastore::Entity.new\nentity.key = key\nentity[\"name\"] = \"Heidi Henderson\""}]},"params":[{"name":"key_or_kind","types":["Key","String","nil"],"description":"A Key object or <code class=\"highlighter-rouge\">kind</code> string\nvalue. This is optional.","optional":true,"default":"nil","nullable":true},{"name":"id_or_name","types":["Integer","String","nil"],"description":"The Key’s <code class=\"highlighter-rouge\">id</code> or <code class=\"highlighter-rouge\">name</code> value\nif a <code class=\"highlighter-rouge\">kind</code> was provided in the first parameter.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"a block yielding a new entity","optional":true,"nullable":false},{"name":"yield.entity","types":["Entity"],"description":"the newly created entity object","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Gcloud::Datastore::Entity"],"description":null}]},{"metadata":{"name":"to_gcloud_entities","description":"<p>Convenince method to convert proto entities to Gcloud entities.</p>","source":"lib/gcloud/datastore/dataset.rb#L396","resources":[],"examples":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"name":"to_gcloud_keys","description":"<p>Convenince method to convert proto keys to Gcloud keys.</p>","source":"lib/gcloud/datastore/dataset.rb#L405","resources":[],"examples":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"name":"optional_partition_id","description":"","source":"lib/gcloud/datastore/dataset.rb#L444","resources":[],"examples":[]},"params":[],"exceptions":[],"returns":[]}]}